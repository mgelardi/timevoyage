/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@reduxjs";
exports.ids = ["vendor-chunks/@reduxjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.cjs.development.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/query/rtk-query.cjs.development.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("var __generator = this && this.__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar __spreadArray = this && this.__spreadArray || function(to, from) {\n    for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];\n    return to;\n};\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function(obj, key, value) {\n    return key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: value\n    }) : obj[key] = value;\n};\nvar __spreadValues = function(a, b) {\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for(var _j = 0, _k = __getOwnPropSymbols(b); _j < _k.length; _j++){\n        var prop = _k[_j];\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = function(a, b) {\n    return __defProps(a, __getOwnPropDescs(b));\n};\nvar __markAsModule = function(target) {\n    return __defProp(target, \"__esModule\", {\n        value: true\n    });\n};\nvar __objRest = function(source, exclude) {\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for(var _j = 0, _k = __getOwnPropSymbols(source); _j < _k.length; _j++){\n        var prop = _k[_j];\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __export = function(target, all) {\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __reExport = function(target, module2, desc) {\n    if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n        var _loop_1 = function(key) {\n            if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n                get: function() {\n                    return module2[key];\n                },\n                enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n            });\n        };\n        for(var _j = 0, _k = __getOwnPropNames(module2); _j < _k.length; _j++){\n            var key = _k[_j];\n            _loop_1(key);\n        }\n    }\n    return target;\n};\nvar __toModule = function(module2) {\n    return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n        get: function() {\n            return module2.default;\n        },\n        enumerable: true\n    } : {\n        value: module2,\n        enumerable: true\n    })), module2);\n};\nvar __async = function(__this, __arguments, generator) {\n    return new Promise(function(resolve, reject) {\n        var fulfilled = function(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = function(value) {\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = function(x) {\n            return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        };\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/query/index.ts\n__markAsModule(exports);\n__export(exports, {\n    QueryStatus: function() {\n        return QueryStatus;\n    },\n    buildCreateApi: function() {\n        return buildCreateApi;\n    },\n    copyWithStructuralSharing: function() {\n        return copyWithStructuralSharing;\n    },\n    coreModule: function() {\n        return coreModule;\n    },\n    coreModuleName: function() {\n        return coreModuleName;\n    },\n    createApi: function() {\n        return createApi;\n    },\n    defaultSerializeQueryArgs: function() {\n        return defaultSerializeQueryArgs;\n    },\n    fakeBaseQuery: function() {\n        return fakeBaseQuery;\n    },\n    fetchBaseQuery: function() {\n        return fetchBaseQuery;\n    },\n    retry: function() {\n        return retry;\n    },\n    setupListeners: function() {\n        return setupListeners;\n    },\n    skipSelector: function() {\n        return skipSelector;\n    },\n    skipToken: function() {\n        return skipToken;\n    }\n});\n// src/query/core/apiState.ts\nvar QueryStatus;\n(function(QueryStatus2) {\n    QueryStatus2[\"uninitialized\"] = \"uninitialized\";\n    QueryStatus2[\"pending\"] = \"pending\";\n    QueryStatus2[\"fulfilled\"] = \"fulfilled\";\n    QueryStatus2[\"rejected\"] = \"rejected\";\n})(QueryStatus || (QueryStatus = {}));\nfunction getRequestStatusFlags(status) {\n    return {\n        status: status,\n        isUninitialized: status === QueryStatus.uninitialized,\n        isLoading: status === QueryStatus.pending,\n        isSuccess: status === QueryStatus.fulfilled,\n        isError: status === QueryStatus.rejected\n    };\n}\n// src/query/utils/isAbsoluteUrl.ts\nfunction isAbsoluteUrl(url) {\n    return new RegExp(\"(^|:)//\").test(url);\n}\n// src/query/utils/joinUrls.ts\nvar withoutTrailingSlash = function(url) {\n    return url.replace(/\\/$/, \"\");\n};\nvar withoutLeadingSlash = function(url) {\n    return url.replace(/^\\//, \"\");\n};\nfunction joinUrls(base, url) {\n    if (!base) {\n        return url;\n    }\n    if (!url) {\n        return base;\n    }\n    if (isAbsoluteUrl(url)) {\n        return url;\n    }\n    var delimiter = base.endsWith(\"/\") || !url.startsWith(\"?\") ? \"/\" : \"\";\n    base = withoutTrailingSlash(base);\n    url = withoutLeadingSlash(url);\n    return \"\" + base + delimiter + url;\n}\n// src/query/utils/flatten.ts\nvar flatten = function(arr) {\n    return [].concat.apply([], arr);\n};\n// src/query/utils/isOnline.ts\nfunction isOnline() {\n    return typeof navigator === \"undefined\" ? true : navigator.onLine === void 0 ? true : navigator.onLine;\n}\n// src/query/utils/isDocumentVisible.ts\nfunction isDocumentVisible() {\n    if (typeof document === \"undefined\") {\n        return true;\n    }\n    return document.visibilityState !== \"hidden\";\n}\n// src/query/utils/copyWithStructuralSharing.ts\nvar import_toolkit = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\nvar isPlainObject = import_toolkit.isPlainObject;\nfunction copyWithStructuralSharing(oldObj, newObj) {\n    if (oldObj === newObj || !(isPlainObject(oldObj) && isPlainObject(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\n        return newObj;\n    }\n    var newKeys = Object.keys(newObj);\n    var oldKeys = Object.keys(oldObj);\n    var isSameObject = newKeys.length === oldKeys.length;\n    var mergeObj = Array.isArray(newObj) ? [] : {};\n    for(var _j = 0, newKeys_1 = newKeys; _j < newKeys_1.length; _j++){\n        var key = newKeys_1[_j];\n        mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\n        if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];\n    }\n    return isSameObject ? oldObj : mergeObj;\n}\n// src/query/fetchBaseQuery.ts\nvar import_toolkit2 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\nvar defaultFetchFn = function() {\n    var args = [];\n    for(var _j = 0; _j < arguments.length; _j++){\n        args[_j] = arguments[_j];\n    }\n    return fetch.apply(void 0, args);\n};\nvar defaultValidateStatus = function(response) {\n    return response.status >= 200 && response.status <= 299;\n};\nvar defaultIsJsonContentType = function(headers) {\n    return /ion\\/(vnd\\.api\\+)?json/.test(headers.get(\"content-type\") || \"\");\n};\nfunction stripUndefined(obj) {\n    if (!(0, import_toolkit2.isPlainObject)(obj)) {\n        return obj;\n    }\n    var copy = __spreadValues({}, obj);\n    for(var _j = 0, _k = Object.entries(copy); _j < _k.length; _j++){\n        var _l = _k[_j], k = _l[0], v = _l[1];\n        if (v === void 0) delete copy[k];\n    }\n    return copy;\n}\nfunction fetchBaseQuery(_a) {\n    var _this = this;\n    if (_a === void 0) {\n        _a = {};\n    }\n    var _b = _a, baseUrl = _b.baseUrl, _j = _b.prepareHeaders, prepareHeaders = _j === void 0 ? function(x) {\n        return x;\n    } : _j, _k = _b.fetchFn, fetchFn = _k === void 0 ? defaultFetchFn : _k, paramsSerializer = _b.paramsSerializer, _l = _b.isJsonContentType, isJsonContentType = _l === void 0 ? defaultIsJsonContentType : _l, _m = _b.jsonContentType, jsonContentType = _m === void 0 ? \"application/json\" : _m, jsonReplacer = _b.jsonReplacer, defaultTimeout = _b.timeout, globalResponseHandler = _b.responseHandler, globalValidateStatus = _b.validateStatus, baseFetchOptions = __objRest(_b, [\n        \"baseUrl\",\n        \"prepareHeaders\",\n        \"fetchFn\",\n        \"paramsSerializer\",\n        \"isJsonContentType\",\n        \"jsonContentType\",\n        \"jsonReplacer\",\n        \"timeout\",\n        \"responseHandler\",\n        \"validateStatus\"\n    ]);\n    if (typeof fetch === \"undefined\" && fetchFn === defaultFetchFn) {\n        console.warn(\"Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.\");\n    }\n    return function(arg, api) {\n        return __async(_this, null, function() {\n            var signal, getState, extra, endpoint, forced, type, meta, _a2, url, _j, headers, _k, params, _l, responseHandler, _m, validateStatus, _o, timeout, rest, config, _p, isJsonifiable, divider, query, request, requestClone, response, timedOut, timeoutId, e_1, responseClone, resultData, responseText, handleResponseError_1, e_2;\n            return __generator(this, function(_q) {\n                switch(_q.label){\n                    case 0:\n                        signal = api.signal, getState = api.getState, extra = api.extra, endpoint = api.endpoint, forced = api.forced, type = api.type;\n                        _a2 = typeof arg == \"string\" ? {\n                            url: arg\n                        } : arg, url = _a2.url, _j = _a2.headers, headers = _j === void 0 ? new Headers(baseFetchOptions.headers) : _j, _k = _a2.params, params = _k === void 0 ? void 0 : _k, _l = _a2.responseHandler, responseHandler = _l === void 0 ? globalResponseHandler != null ? globalResponseHandler : \"json\" : _l, _m = _a2.validateStatus, validateStatus = _m === void 0 ? globalValidateStatus != null ? globalValidateStatus : defaultValidateStatus : _m, _o = _a2.timeout, timeout = _o === void 0 ? defaultTimeout : _o, rest = __objRest(_a2, [\n                            \"url\",\n                            \"headers\",\n                            \"params\",\n                            \"responseHandler\",\n                            \"validateStatus\",\n                            \"timeout\"\n                        ]);\n                        config = __spreadValues(__spreadProps(__spreadValues({}, baseFetchOptions), {\n                            signal: signal\n                        }), rest);\n                        headers = new Headers(stripUndefined(headers));\n                        _p = config;\n                        return [\n                            4 /*yield*/ ,\n                            prepareHeaders(headers, {\n                                getState: getState,\n                                extra: extra,\n                                endpoint: endpoint,\n                                forced: forced,\n                                type: type\n                            })\n                        ];\n                    case 1:\n                        _p.headers = _q.sent() || headers;\n                        isJsonifiable = function(body) {\n                            return typeof body === \"object\" && ((0, import_toolkit2.isPlainObject)(body) || Array.isArray(body) || typeof body.toJSON === \"function\");\n                        };\n                        if (!config.headers.has(\"content-type\") && isJsonifiable(config.body)) {\n                            config.headers.set(\"content-type\", jsonContentType);\n                        }\n                        if (isJsonifiable(config.body) && isJsonContentType(config.headers)) {\n                            config.body = JSON.stringify(config.body, jsonReplacer);\n                        }\n                        if (params) {\n                            divider = ~url.indexOf(\"?\") ? \"&\" : \"?\";\n                            query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\n                            url += divider + query;\n                        }\n                        url = joinUrls(baseUrl, url);\n                        request = new Request(url, config);\n                        requestClone = new Request(url, config);\n                        meta = {\n                            request: requestClone\n                        };\n                        timedOut = false, timeoutId = timeout && setTimeout(function() {\n                            timedOut = true;\n                            api.abort();\n                        }, timeout);\n                        _q.label = 2;\n                    case 2:\n                        _q.trys.push([\n                            2,\n                            4,\n                            5,\n                            6\n                        ]);\n                        return [\n                            4 /*yield*/ ,\n                            fetchFn(request)\n                        ];\n                    case 3:\n                        response = _q.sent();\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 4:\n                        e_1 = _q.sent();\n                        return [\n                            2 /*return*/ ,\n                            {\n                                error: {\n                                    status: timedOut ? \"TIMEOUT_ERROR\" : \"FETCH_ERROR\",\n                                    error: String(e_1)\n                                },\n                                meta: meta\n                            }\n                        ];\n                    case 5:\n                        if (timeoutId) clearTimeout(timeoutId);\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 6:\n                        responseClone = response.clone();\n                        meta.response = responseClone;\n                        responseText = \"\";\n                        _q.label = 7;\n                    case 7:\n                        _q.trys.push([\n                            7,\n                            9,\n                            ,\n                            10\n                        ]);\n                        return [\n                            4 /*yield*/ ,\n                            Promise.all([\n                                handleResponse(response, responseHandler).then(function(r) {\n                                    return resultData = r;\n                                }, function(e) {\n                                    return handleResponseError_1 = e;\n                                }),\n                                responseClone.text().then(function(r) {\n                                    return responseText = r;\n                                }, function() {})\n                            ])\n                        ];\n                    case 8:\n                        _q.sent();\n                        if (handleResponseError_1) throw handleResponseError_1;\n                        return [\n                            3 /*break*/ ,\n                            10\n                        ];\n                    case 9:\n                        e_2 = _q.sent();\n                        return [\n                            2 /*return*/ ,\n                            {\n                                error: {\n                                    status: \"PARSING_ERROR\",\n                                    originalStatus: response.status,\n                                    data: responseText,\n                                    error: String(e_2)\n                                },\n                                meta: meta\n                            }\n                        ];\n                    case 10:\n                        return [\n                            2 /*return*/ ,\n                            validateStatus(response, resultData) ? {\n                                data: resultData,\n                                meta: meta\n                            } : {\n                                error: {\n                                    status: response.status,\n                                    data: resultData\n                                },\n                                meta: meta\n                            }\n                        ];\n                }\n            });\n        });\n    };\n    function handleResponse(response, responseHandler) {\n        return __async(this, null, function() {\n            var text;\n            return __generator(this, function(_j) {\n                switch(_j.label){\n                    case 0:\n                        if (typeof responseHandler === \"function\") {\n                            return [\n                                2 /*return*/ ,\n                                responseHandler(response)\n                            ];\n                        }\n                        if (responseHandler === \"content-type\") {\n                            responseHandler = isJsonContentType(response.headers) ? \"json\" : \"text\";\n                        }\n                        if (!(responseHandler === \"json\")) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            response.text()\n                        ];\n                    case 1:\n                        text = _j.sent();\n                        return [\n                            2 /*return*/ ,\n                            text.length ? JSON.parse(text) : null\n                        ];\n                    case 2:\n                        return [\n                            2 /*return*/ ,\n                            response.text()\n                        ];\n                }\n            });\n        });\n    }\n}\n// src/query/HandledError.ts\nvar HandledError = /** @class */ function() {\n    function HandledError(value, meta) {\n        if (meta === void 0) {\n            meta = void 0;\n        }\n        this.value = value;\n        this.meta = meta;\n    }\n    return HandledError;\n}();\n// src/query/retry.ts\nfunction defaultBackoff(attempt, maxRetries) {\n    if (attempt === void 0) {\n        attempt = 0;\n    }\n    if (maxRetries === void 0) {\n        maxRetries = 5;\n    }\n    return __async(this, null, function() {\n        var attempts, timeout;\n        return __generator(this, function(_j) {\n            switch(_j.label){\n                case 0:\n                    attempts = Math.min(attempt, maxRetries);\n                    timeout = ~~((Math.random() + 0.4) * (300 << attempts));\n                    return [\n                        4 /*yield*/ ,\n                        new Promise(function(resolve) {\n                            return setTimeout(function(res) {\n                                return resolve(res);\n                            }, timeout);\n                        })\n                    ];\n                case 1:\n                    _j.sent();\n                    return [\n                        2 /*return*/ \n                    ];\n            }\n        });\n    });\n}\nfunction fail(e) {\n    throw Object.assign(new HandledError({\n        error: e\n    }), {\n        throwImmediately: true\n    });\n}\nvar EMPTY_OPTIONS = {};\nvar retryWithBackoff = function(baseQuery, defaultOptions) {\n    return function(args, api, extraOptions) {\n        return __async(void 0, null, function() {\n            var possibleMaxRetries, maxRetries, defaultRetryCondition, options, retry2, result, e_3;\n            return __generator(this, function(_j) {\n                switch(_j.label){\n                    case 0:\n                        possibleMaxRetries = [\n                            5,\n                            (defaultOptions || EMPTY_OPTIONS).maxRetries,\n                            (extraOptions || EMPTY_OPTIONS).maxRetries\n                        ].filter(function(x) {\n                            return x !== void 0;\n                        });\n                        maxRetries = possibleMaxRetries.slice(-1)[0];\n                        defaultRetryCondition = function(_, __, _j) {\n                            var attempt = _j.attempt;\n                            return attempt <= maxRetries;\n                        };\n                        options = __spreadValues(__spreadValues({\n                            maxRetries: maxRetries,\n                            backoff: defaultBackoff,\n                            retryCondition: defaultRetryCondition\n                        }, defaultOptions), extraOptions);\n                        retry2 = 0;\n                        _j.label = 1;\n                    case 1:\n                        if (false) {}\n                        _j.label = 2;\n                    case 2:\n                        _j.trys.push([\n                            2,\n                            4,\n                            ,\n                            6\n                        ]);\n                        return [\n                            4 /*yield*/ ,\n                            baseQuery(args, api, extraOptions)\n                        ];\n                    case 3:\n                        result = _j.sent();\n                        if (result.error) {\n                            throw new HandledError(result);\n                        }\n                        return [\n                            2 /*return*/ ,\n                            result\n                        ];\n                    case 4:\n                        e_3 = _j.sent();\n                        retry2++;\n                        if (e_3.throwImmediately) {\n                            if (e_3 instanceof HandledError) {\n                                return [\n                                    2 /*return*/ ,\n                                    e_3.value\n                                ];\n                            }\n                            throw e_3;\n                        }\n                        if (e_3 instanceof HandledError && !options.retryCondition(e_3.value.error, args, {\n                            attempt: retry2,\n                            baseQueryApi: api,\n                            extraOptions: extraOptions\n                        })) {\n                            return [\n                                2 /*return*/ ,\n                                e_3.value\n                            ];\n                        }\n                        return [\n                            4 /*yield*/ ,\n                            options.backoff(retry2, options.maxRetries)\n                        ];\n                    case 5:\n                        _j.sent();\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 6:\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 7:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n};\nvar retry = /* @__PURE__ */ Object.assign(retryWithBackoff, {\n    fail: fail\n});\n// src/query/core/setupListeners.ts\nvar import_toolkit3 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\nvar onFocus = /* @__PURE__ */ (0, import_toolkit3.createAction)(\"__rtkq/focused\");\nvar onFocusLost = /* @__PURE__ */ (0, import_toolkit3.createAction)(\"__rtkq/unfocused\");\nvar onOnline = /* @__PURE__ */ (0, import_toolkit3.createAction)(\"__rtkq/online\");\nvar onOffline = /* @__PURE__ */ (0, import_toolkit3.createAction)(\"__rtkq/offline\");\nvar initialized = false;\nfunction setupListeners(dispatch, customHandler) {\n    function defaultHandler() {\n        var handleFocus = function() {\n            return dispatch(onFocus());\n        };\n        var handleFocusLost = function() {\n            return dispatch(onFocusLost());\n        };\n        var handleOnline = function() {\n            return dispatch(onOnline());\n        };\n        var handleOffline = function() {\n            return dispatch(onOffline());\n        };\n        var handleVisibilityChange = function() {\n            if (window.document.visibilityState === \"visible\") {\n                handleFocus();\n            } else {\n                handleFocusLost();\n            }\n        };\n        if (!initialized) {\n            if (false) {}\n        }\n        var unsubscribe = function() {\n            window.removeEventListener(\"focus\", handleFocus);\n            window.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n            window.removeEventListener(\"online\", handleOnline);\n            window.removeEventListener(\"offline\", handleOffline);\n            initialized = false;\n        };\n        return unsubscribe;\n    }\n    return customHandler ? customHandler(dispatch, {\n        onFocus: onFocus,\n        onFocusLost: onFocusLost,\n        onOffline: onOffline,\n        onOnline: onOnline\n    }) : defaultHandler();\n}\n// src/query/core/buildSelectors.ts\nvar import_toolkit7 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\n// src/query/endpointDefinitions.ts\nvar DefinitionType;\n(function(DefinitionType2) {\n    DefinitionType2[\"query\"] = \"query\";\n    DefinitionType2[\"mutation\"] = \"mutation\";\n})(DefinitionType || (DefinitionType = {}));\nfunction isQueryDefinition(e) {\n    return e.type === DefinitionType.query;\n}\nfunction isMutationDefinition(e) {\n    return e.type === DefinitionType.mutation;\n}\nfunction calculateProvidedBy(description, result, error, queryArg, meta, assertTagTypes) {\n    if (isFunction(description)) {\n        return description(result, error, queryArg, meta).map(expandTagDescription).map(assertTagTypes);\n    }\n    if (Array.isArray(description)) {\n        return description.map(expandTagDescription).map(assertTagTypes);\n    }\n    return [];\n}\nfunction isFunction(t) {\n    return typeof t === \"function\";\n}\nfunction expandTagDescription(description) {\n    return typeof description === \"string\" ? {\n        type: description\n    } : description;\n}\n// src/query/core/buildSlice.ts\nvar import_toolkit6 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\n// src/query/utils/isNotNullish.ts\nfunction isNotNullish(v) {\n    return v != null;\n}\n// src/query/core/buildInitiate.ts\nvar forceQueryFnSymbol = Symbol(\"forceQueryFn\");\nvar isUpsertQuery = function(arg) {\n    return typeof arg[forceQueryFnSymbol] === \"function\";\n};\nfunction buildInitiate(_j) {\n    var serializeQueryArgs = _j.serializeQueryArgs, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk, api = _j.api, context = _j.context;\n    var runningQueries = new Map();\n    var runningMutations = new Map();\n    var _k = api.internalActions, unsubscribeQueryResult = _k.unsubscribeQueryResult, removeMutationResult = _k.removeMutationResult, updateSubscriptionOptions = _k.updateSubscriptionOptions;\n    return {\n        buildInitiateQuery: buildInitiateQuery,\n        buildInitiateMutation: buildInitiateMutation,\n        getRunningQueryThunk: getRunningQueryThunk,\n        getRunningMutationThunk: getRunningMutationThunk,\n        getRunningQueriesThunk: getRunningQueriesThunk,\n        getRunningMutationsThunk: getRunningMutationsThunk,\n        getRunningOperationPromises: getRunningOperationPromises,\n        removalWarning: removalWarning\n    };\n    function removalWarning() {\n        throw new Error(\"This method had to be removed due to a conceptual bug in RTK.\\n       Please see https://github.com/reduxjs/redux-toolkit/pull/2481 for details.\\n       See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for new guidance on SSR.\");\n    }\n    function getRunningOperationPromises() {\n        if (typeof process !== \"undefined\" && true) {\n            removalWarning();\n        } else {\n            var extract = function(v) {\n                return Array.from(v.values()).flatMap(function(queriesForStore) {\n                    return queriesForStore ? Object.values(queriesForStore) : [];\n                });\n            };\n            return __spreadArray(__spreadArray([], extract(runningQueries)), extract(runningMutations)).filter(isNotNullish);\n        }\n    }\n    function getRunningQueryThunk(endpointName, queryArgs) {\n        return function(dispatch) {\n            var _a;\n            var endpointDefinition = context.endpointDefinitions[endpointName];\n            var queryCacheKey = serializeQueryArgs({\n                queryArgs: queryArgs,\n                endpointDefinition: endpointDefinition,\n                endpointName: endpointName\n            });\n            return (_a = runningQueries.get(dispatch)) == null ? void 0 : _a[queryCacheKey];\n        };\n    }\n    function getRunningMutationThunk(_endpointName, fixedCacheKeyOrRequestId) {\n        return function(dispatch) {\n            var _a;\n            return (_a = runningMutations.get(dispatch)) == null ? void 0 : _a[fixedCacheKeyOrRequestId];\n        };\n    }\n    function getRunningQueriesThunk() {\n        return function(dispatch) {\n            return Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish);\n        };\n    }\n    function getRunningMutationsThunk() {\n        return function(dispatch) {\n            return Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish);\n        };\n    }\n    function middlewareWarning(dispatch) {\n        if (true) {\n            if (middlewareWarning.triggered) return;\n            var registered = dispatch(api.internalActions.internal_probeSubscription({\n                queryCacheKey: \"DOES_NOT_EXIST\",\n                requestId: \"DUMMY_REQUEST_ID\"\n            }));\n            middlewareWarning.triggered = true;\n            if (typeof registered !== \"boolean\") {\n                throw new Error('Warning: Middleware for RTK-Query API at reducerPath \"' + api.reducerPath + '\" has not been added to the store.\\nYou must add the middleware for RTK-Query to function correctly!');\n            }\n        }\n    }\n    function buildInitiateQuery(endpointName, endpointDefinition) {\n        var queryAction = function(arg, _j) {\n            var _k = _j === void 0 ? {} : _j, _l = _k.subscribe, subscribe = _l === void 0 ? true : _l, forceRefetch = _k.forceRefetch, subscriptionOptions = _k.subscriptionOptions, _m = forceQueryFnSymbol, forceQueryFn = _k[_m];\n            return function(dispatch, getState) {\n                var _j;\n                var _a;\n                var queryCacheKey = serializeQueryArgs({\n                    queryArgs: arg,\n                    endpointDefinition: endpointDefinition,\n                    endpointName: endpointName\n                });\n                var thunk = queryThunk((_j = {\n                    type: \"query\",\n                    subscribe: subscribe,\n                    forceRefetch: forceRefetch,\n                    subscriptionOptions: subscriptionOptions,\n                    endpointName: endpointName,\n                    originalArgs: arg,\n                    queryCacheKey: queryCacheKey\n                }, _j[forceQueryFnSymbol] = forceQueryFn, _j));\n                var selector = api.endpoints[endpointName].select(arg);\n                var thunkResult = dispatch(thunk);\n                var stateAfter = selector(getState());\n                middlewareWarning(dispatch);\n                var requestId = thunkResult.requestId, abort = thunkResult.abort;\n                var skippedSynchronously = stateAfter.requestId !== requestId;\n                var runningQuery = (_a = runningQueries.get(dispatch)) == null ? void 0 : _a[queryCacheKey];\n                var selectFromState = function() {\n                    return selector(getState());\n                };\n                var statePromise = Object.assign(forceQueryFn ? thunkResult.then(selectFromState) : skippedSynchronously && !runningQuery ? Promise.resolve(stateAfter) : Promise.all([\n                    runningQuery,\n                    thunkResult\n                ]).then(selectFromState), {\n                    arg: arg,\n                    requestId: requestId,\n                    subscriptionOptions: subscriptionOptions,\n                    queryCacheKey: queryCacheKey,\n                    abort: abort,\n                    unwrap: function() {\n                        return __async(this, null, function() {\n                            var result;\n                            return __generator(this, function(_j) {\n                                switch(_j.label){\n                                    case 0:\n                                        return [\n                                            4 /*yield*/ ,\n                                            statePromise\n                                        ];\n                                    case 1:\n                                        result = _j.sent();\n                                        if (result.isError) {\n                                            throw result.error;\n                                        }\n                                        return [\n                                            2 /*return*/ ,\n                                            result.data\n                                        ];\n                                }\n                            });\n                        });\n                    },\n                    refetch: function() {\n                        return dispatch(queryAction(arg, {\n                            subscribe: false,\n                            forceRefetch: true\n                        }));\n                    },\n                    unsubscribe: function() {\n                        if (subscribe) dispatch(unsubscribeQueryResult({\n                            queryCacheKey: queryCacheKey,\n                            requestId: requestId\n                        }));\n                    },\n                    updateSubscriptionOptions: function(options) {\n                        statePromise.subscriptionOptions = options;\n                        dispatch(updateSubscriptionOptions({\n                            endpointName: endpointName,\n                            requestId: requestId,\n                            queryCacheKey: queryCacheKey,\n                            options: options\n                        }));\n                    }\n                });\n                if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\n                    var running_1 = runningQueries.get(dispatch) || {};\n                    running_1[queryCacheKey] = statePromise;\n                    runningQueries.set(dispatch, running_1);\n                    statePromise.then(function() {\n                        delete running_1[queryCacheKey];\n                        if (!Object.keys(running_1).length) {\n                            runningQueries.delete(dispatch);\n                        }\n                    });\n                }\n                return statePromise;\n            };\n        };\n        return queryAction;\n    }\n    function buildInitiateMutation(endpointName) {\n        return function(arg, _j) {\n            var _k = _j === void 0 ? {} : _j, _l = _k.track, track = _l === void 0 ? true : _l, fixedCacheKey = _k.fixedCacheKey;\n            return function(dispatch, getState) {\n                var thunk = mutationThunk({\n                    type: \"mutation\",\n                    endpointName: endpointName,\n                    originalArgs: arg,\n                    track: track,\n                    fixedCacheKey: fixedCacheKey\n                });\n                var thunkResult = dispatch(thunk);\n                middlewareWarning(dispatch);\n                var requestId = thunkResult.requestId, abort = thunkResult.abort, unwrap = thunkResult.unwrap;\n                var returnValuePromise = thunkResult.unwrap().then(function(data) {\n                    return {\n                        data: data\n                    };\n                }).catch(function(error) {\n                    return {\n                        error: error\n                    };\n                });\n                var reset = function() {\n                    dispatch(removeMutationResult({\n                        requestId: requestId,\n                        fixedCacheKey: fixedCacheKey\n                    }));\n                };\n                var ret = Object.assign(returnValuePromise, {\n                    arg: thunkResult.arg,\n                    requestId: requestId,\n                    abort: abort,\n                    unwrap: unwrap,\n                    unsubscribe: reset,\n                    reset: reset\n                });\n                var running = runningMutations.get(dispatch) || {};\n                runningMutations.set(dispatch, running);\n                running[requestId] = ret;\n                ret.then(function() {\n                    delete running[requestId];\n                    if (!Object.keys(running).length) {\n                        runningMutations.delete(dispatch);\n                    }\n                });\n                if (fixedCacheKey) {\n                    running[fixedCacheKey] = ret;\n                    ret.then(function() {\n                        if (running[fixedCacheKey] === ret) {\n                            delete running[fixedCacheKey];\n                            if (!Object.keys(running).length) {\n                                runningMutations.delete(dispatch);\n                            }\n                        }\n                    });\n                }\n                return ret;\n            };\n        };\n    }\n}\n// src/query/core/buildThunks.ts\nvar import_toolkit4 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\nvar import_immer = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\nvar import_toolkit5 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\nfunction defaultTransformResponse(baseQueryReturnValue) {\n    return baseQueryReturnValue;\n}\nfunction buildThunks(_j) {\n    var _this = this;\n    var reducerPath = _j.reducerPath, baseQuery = _j.baseQuery, endpointDefinitions = _j.context.endpointDefinitions, serializeQueryArgs = _j.serializeQueryArgs, api = _j.api, assertTagType = _j.assertTagType;\n    var patchQueryData = function(endpointName, args, patches, updateProvided) {\n        return function(dispatch, getState) {\n            var endpointDefinition = endpointDefinitions[endpointName];\n            var queryCacheKey = serializeQueryArgs({\n                queryArgs: args,\n                endpointDefinition: endpointDefinition,\n                endpointName: endpointName\n            });\n            dispatch(api.internalActions.queryResultPatched({\n                queryCacheKey: queryCacheKey,\n                patches: patches\n            }));\n            if (!updateProvided) {\n                return;\n            }\n            var newValue = api.endpoints[endpointName].select(args)(getState());\n            var providedTags = calculateProvidedBy(endpointDefinition.providesTags, newValue.data, void 0, args, {}, assertTagType);\n            dispatch(api.internalActions.updateProvidedBy({\n                queryCacheKey: queryCacheKey,\n                providedTags: providedTags\n            }));\n        };\n    };\n    var updateQueryData = function(endpointName, args, updateRecipe, updateProvided) {\n        if (updateProvided === void 0) {\n            updateProvided = true;\n        }\n        return function(dispatch, getState) {\n            var _j, _k;\n            var endpointDefinition = api.endpoints[endpointName];\n            var currentState = endpointDefinition.select(args)(getState());\n            var ret = {\n                patches: [],\n                inversePatches: [],\n                undo: function() {\n                    return dispatch(api.util.patchQueryData(endpointName, args, ret.inversePatches, updateProvided));\n                }\n            };\n            if (currentState.status === QueryStatus.uninitialized) {\n                return ret;\n            }\n            var newValue;\n            if (\"data\" in currentState) {\n                if ((0, import_immer.isDraftable)(currentState.data)) {\n                    var _l = (0, import_immer.produceWithPatches)(currentState.data, updateRecipe), value = _l[0], patches = _l[1], inversePatches = _l[2];\n                    (_j = ret.patches).push.apply(_j, patches);\n                    (_k = ret.inversePatches).push.apply(_k, inversePatches);\n                    newValue = value;\n                } else {\n                    newValue = updateRecipe(currentState.data);\n                    ret.patches.push({\n                        op: \"replace\",\n                        path: [],\n                        value: newValue\n                    });\n                    ret.inversePatches.push({\n                        op: \"replace\",\n                        path: [],\n                        value: currentState.data\n                    });\n                }\n            }\n            dispatch(api.util.patchQueryData(endpointName, args, ret.patches, updateProvided));\n            return ret;\n        };\n    };\n    var upsertQueryData = function(endpointName, args, value) {\n        return function(dispatch) {\n            var _j;\n            return dispatch(api.endpoints[endpointName].initiate(args, (_j = {\n                subscribe: false,\n                forceRefetch: true\n            }, _j[forceQueryFnSymbol] = function() {\n                return {\n                    data: value\n                };\n            }, _j)));\n        };\n    };\n    var executeEndpoint = function(_0, _1) {\n        return __async(_this, [\n            _0,\n            _1\n        ], function(arg, _j) {\n            var endpointDefinition, transformResponse, result, baseQueryApi_1, forceQueryFn, what, err, _k, _l, key, _m, error_1, catchedError, transformErrorResponse, _o, e_4;\n            var _p, _q;\n            var signal = _j.signal, abort = _j.abort, rejectWithValue = _j.rejectWithValue, fulfillWithValue = _j.fulfillWithValue, dispatch = _j.dispatch, getState = _j.getState, extra = _j.extra;\n            return __generator(this, function(_r) {\n                switch(_r.label){\n                    case 0:\n                        endpointDefinition = endpointDefinitions[arg.endpointName];\n                        _r.label = 1;\n                    case 1:\n                        _r.trys.push([\n                            1,\n                            8,\n                            ,\n                            13\n                        ]);\n                        transformResponse = defaultTransformResponse;\n                        result = void 0;\n                        baseQueryApi_1 = {\n                            signal: signal,\n                            abort: abort,\n                            dispatch: dispatch,\n                            getState: getState,\n                            extra: extra,\n                            endpoint: arg.endpointName,\n                            type: arg.type,\n                            forced: arg.type === \"query\" ? isForcedQuery(arg, getState()) : void 0\n                        };\n                        forceQueryFn = arg.type === \"query\" ? arg[forceQueryFnSymbol] : void 0;\n                        if (!forceQueryFn) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        result = forceQueryFn();\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 2:\n                        if (!endpointDefinition.query) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            baseQuery(endpointDefinition.query(arg.originalArgs), baseQueryApi_1, endpointDefinition.extraOptions)\n                        ];\n                    case 3:\n                        result = _r.sent();\n                        if (endpointDefinition.transformResponse) {\n                            transformResponse = endpointDefinition.transformResponse;\n                        }\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 4:\n                        return [\n                            4 /*yield*/ ,\n                            endpointDefinition.queryFn(arg.originalArgs, baseQueryApi_1, endpointDefinition.extraOptions, function(arg2) {\n                                return baseQuery(arg2, baseQueryApi_1, endpointDefinition.extraOptions);\n                            })\n                        ];\n                    case 5:\n                        result = _r.sent();\n                        _r.label = 6;\n                    case 6:\n                        if (typeof process !== \"undefined\" && true) {\n                            what = endpointDefinition.query ? \"`baseQuery`\" : \"`queryFn`\";\n                            err = void 0;\n                            if (!result) {\n                                err = what + \" did not return anything.\";\n                            } else if (typeof result !== \"object\") {\n                                err = what + \" did not return an object.\";\n                            } else if (result.error && result.data) {\n                                err = what + \" returned an object containing both `error` and `result`.\";\n                            } else if (result.error === void 0 && result.data === void 0) {\n                                err = what + \" returned an object containing neither a valid `error` and `result`. At least one of them should not be `undefined`\";\n                            } else {\n                                for(_k = 0, _l = Object.keys(result); _k < _l.length; _k++){\n                                    key = _l[_k];\n                                    if (key !== \"error\" && key !== \"data\" && key !== \"meta\") {\n                                        err = \"The object returned by \" + what + \" has the unknown property \" + key + \".\";\n                                        break;\n                                    }\n                                }\n                            }\n                            if (err) {\n                                console.error(\"Error encountered handling the endpoint \" + arg.endpointName + \".\\n              \" + err + \"\\n              It needs to return an object with either the shape `{ data: <value> }` or `{ error: <value> }` that may contain an optional `meta` property.\\n              Object returned was:\", result);\n                            }\n                        }\n                        if (result.error) throw new HandledError(result.error, result.meta);\n                        _m = fulfillWithValue;\n                        return [\n                            4 /*yield*/ ,\n                            transformResponse(result.data, result.meta, arg.originalArgs)\n                        ];\n                    case 7:\n                        return [\n                            2 /*return*/ ,\n                            _m.apply(void 0, [\n                                _r.sent(),\n                                (_p = {\n                                    fulfilledTimeStamp: Date.now(),\n                                    baseQueryMeta: result.meta\n                                }, _p[import_toolkit5.SHOULD_AUTOBATCH] = true, _p)\n                            ])\n                        ];\n                    case 8:\n                        error_1 = _r.sent();\n                        catchedError = error_1;\n                        if (!(catchedError instanceof HandledError)) return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                        transformErrorResponse = defaultTransformResponse;\n                        if (endpointDefinition.query && endpointDefinition.transformErrorResponse) {\n                            transformErrorResponse = endpointDefinition.transformErrorResponse;\n                        }\n                        _r.label = 9;\n                    case 9:\n                        _r.trys.push([\n                            9,\n                            11,\n                            ,\n                            12\n                        ]);\n                        _o = rejectWithValue;\n                        return [\n                            4 /*yield*/ ,\n                            transformErrorResponse(catchedError.value, catchedError.meta, arg.originalArgs)\n                        ];\n                    case 10:\n                        return [\n                            2 /*return*/ ,\n                            _o.apply(void 0, [\n                                _r.sent(),\n                                (_q = {\n                                    baseQueryMeta: catchedError.meta\n                                }, _q[import_toolkit5.SHOULD_AUTOBATCH] = true, _q)\n                            ])\n                        ];\n                    case 11:\n                        e_4 = _r.sent();\n                        catchedError = e_4;\n                        return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                    case 12:\n                        if (typeof process !== \"undefined\" && true) {\n                            console.error('An unhandled error occurred processing a request for the endpoint \"' + arg.endpointName + '\".\\nIn the case of an unhandled error, no tags will be \"provided\" or \"invalidated\".', catchedError);\n                        } else {\n                            console.error(catchedError);\n                        }\n                        throw catchedError;\n                    case 13:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    function isForcedQuery(arg, state) {\n        var _a, _b, _c, _d;\n        var requestState = (_b = (_a = state[reducerPath]) == null ? void 0 : _a.queries) == null ? void 0 : _b[arg.queryCacheKey];\n        var baseFetchOnMountOrArgChange = (_c = state[reducerPath]) == null ? void 0 : _c.config.refetchOnMountOrArgChange;\n        var fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;\n        var refetchVal = (_d = arg.forceRefetch) != null ? _d : arg.subscribe && baseFetchOnMountOrArgChange;\n        if (refetchVal) {\n            return refetchVal === true || (Number(new Date()) - Number(fulfilledVal)) / 1e3 >= refetchVal;\n        }\n        return false;\n    }\n    var queryThunk = (0, import_toolkit5.createAsyncThunk)(reducerPath + \"/executeQuery\", executeEndpoint, {\n        getPendingMeta: function() {\n            var _j;\n            return _j = {\n                startedTimeStamp: Date.now()\n            }, _j[import_toolkit5.SHOULD_AUTOBATCH] = true, _j;\n        },\n        condition: function(queryThunkArgs, _j) {\n            var getState = _j.getState;\n            var _a, _b, _c;\n            var state = getState();\n            var requestState = (_b = (_a = state[reducerPath]) == null ? void 0 : _a.queries) == null ? void 0 : _b[queryThunkArgs.queryCacheKey];\n            var fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;\n            var currentArg = queryThunkArgs.originalArgs;\n            var previousArg = requestState == null ? void 0 : requestState.originalArgs;\n            var endpointDefinition = endpointDefinitions[queryThunkArgs.endpointName];\n            if (isUpsertQuery(queryThunkArgs)) {\n                return true;\n            }\n            if ((requestState == null ? void 0 : requestState.status) === \"pending\") {\n                return false;\n            }\n            if (isForcedQuery(queryThunkArgs, state)) {\n                return true;\n            }\n            if (isQueryDefinition(endpointDefinition) && ((_c = endpointDefinition == null ? void 0 : endpointDefinition.forceRefetch) == null ? void 0 : _c.call(endpointDefinition, {\n                currentArg: currentArg,\n                previousArg: previousArg,\n                endpointState: requestState,\n                state: state\n            }))) {\n                return true;\n            }\n            if (fulfilledVal) {\n                return false;\n            }\n            return true;\n        },\n        dispatchConditionRejection: true\n    });\n    var mutationThunk = (0, import_toolkit5.createAsyncThunk)(reducerPath + \"/executeMutation\", executeEndpoint, {\n        getPendingMeta: function() {\n            var _j;\n            return _j = {\n                startedTimeStamp: Date.now()\n            }, _j[import_toolkit5.SHOULD_AUTOBATCH] = true, _j;\n        }\n    });\n    var hasTheForce = function(options) {\n        return \"force\" in options;\n    };\n    var hasMaxAge = function(options) {\n        return \"ifOlderThan\" in options;\n    };\n    var prefetch = function(endpointName, arg, options) {\n        return function(dispatch, getState) {\n            var force = hasTheForce(options) && options.force;\n            var maxAge = hasMaxAge(options) && options.ifOlderThan;\n            var queryAction = function(force2) {\n                if (force2 === void 0) {\n                    force2 = true;\n                }\n                return api.endpoints[endpointName].initiate(arg, {\n                    forceRefetch: force2\n                });\n            };\n            var latestStateValue = api.endpoints[endpointName].select(arg)(getState());\n            if (force) {\n                dispatch(queryAction());\n            } else if (maxAge) {\n                var lastFulfilledTs = latestStateValue == null ? void 0 : latestStateValue.fulfilledTimeStamp;\n                if (!lastFulfilledTs) {\n                    dispatch(queryAction());\n                    return;\n                }\n                var shouldRetrigger = (Number(new Date()) - Number(new Date(lastFulfilledTs))) / 1e3 >= maxAge;\n                if (shouldRetrigger) {\n                    dispatch(queryAction());\n                }\n            } else {\n                dispatch(queryAction(false));\n            }\n        };\n    };\n    function matchesEndpoint(endpointName) {\n        return function(action) {\n            var _a, _b;\n            return ((_b = (_a = action == null ? void 0 : action.meta) == null ? void 0 : _a.arg) == null ? void 0 : _b.endpointName) === endpointName;\n        };\n    }\n    function buildMatchThunkActions(thunk, endpointName) {\n        return {\n            matchPending: (0, import_toolkit4.isAllOf)((0, import_toolkit4.isPending)(thunk), matchesEndpoint(endpointName)),\n            matchFulfilled: (0, import_toolkit4.isAllOf)((0, import_toolkit4.isFulfilled)(thunk), matchesEndpoint(endpointName)),\n            matchRejected: (0, import_toolkit4.isAllOf)((0, import_toolkit4.isRejected)(thunk), matchesEndpoint(endpointName))\n        };\n    }\n    return {\n        queryThunk: queryThunk,\n        mutationThunk: mutationThunk,\n        prefetch: prefetch,\n        updateQueryData: updateQueryData,\n        upsertQueryData: upsertQueryData,\n        patchQueryData: patchQueryData,\n        buildMatchThunkActions: buildMatchThunkActions\n    };\n}\nfunction calculateProvidedByThunk(action, type, endpointDefinitions, assertTagType) {\n    return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], (0, import_toolkit4.isFulfilled)(action) ? action.payload : void 0, (0, import_toolkit4.isRejectedWithValue)(action) ? action.payload : void 0, action.meta.arg.originalArgs, \"baseQueryMeta\" in action.meta ? action.meta.baseQueryMeta : void 0, assertTagType);\n}\n// src/query/core/buildSlice.ts\nvar import_immer2 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\nvar import_immer3 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\nfunction updateQuerySubstateIfExists(state, queryCacheKey, update) {\n    var substate = state[queryCacheKey];\n    if (substate) {\n        update(substate);\n    }\n}\nfunction getMutationCacheKey(id) {\n    var _a;\n    return (_a = \"arg\" in id ? id.arg.fixedCacheKey : id.fixedCacheKey) != null ? _a : id.requestId;\n}\nfunction updateMutationSubstateIfExists(state, id, update) {\n    var substate = state[getMutationCacheKey(id)];\n    if (substate) {\n        update(substate);\n    }\n}\nvar initialState = {};\nfunction buildSlice(_j) {\n    var reducerPath = _j.reducerPath, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk, _k = _j.context, definitions = _k.endpointDefinitions, apiUid = _k.apiUid, extractRehydrationInfo = _k.extractRehydrationInfo, hasRehydrationInfo = _k.hasRehydrationInfo, assertTagType = _j.assertTagType, config = _j.config;\n    var resetApiState = (0, import_toolkit6.createAction)(reducerPath + \"/resetApiState\");\n    var querySlice = (0, import_toolkit6.createSlice)({\n        name: reducerPath + \"/queries\",\n        initialState: initialState,\n        reducers: {\n            removeQueryResult: {\n                reducer: function(draft, _j) {\n                    var queryCacheKey = _j.payload.queryCacheKey;\n                    delete draft[queryCacheKey];\n                },\n                prepare: (0, import_toolkit6.prepareAutoBatched)()\n            },\n            queryResultPatched: {\n                reducer: function(draft, _j) {\n                    var _k = _j.payload, queryCacheKey = _k.queryCacheKey, patches = _k.patches;\n                    updateQuerySubstateIfExists(draft, queryCacheKey, function(substate) {\n                        substate.data = (0, import_immer3.applyPatches)(substate.data, patches.concat());\n                    });\n                },\n                prepare: (0, import_toolkit6.prepareAutoBatched)()\n            }\n        },\n        extraReducers: function(builder) {\n            builder.addCase(queryThunk.pending, function(draft, _j) {\n                var meta = _j.meta, arg = _j.meta.arg;\n                var _a, _b;\n                var upserting = isUpsertQuery(arg);\n                if (arg.subscribe || upserting) {\n                    (_b = draft[_a = arg.queryCacheKey]) != null ? _b : draft[_a] = {\n                        status: QueryStatus.uninitialized,\n                        endpointName: arg.endpointName\n                    };\n                }\n                updateQuerySubstateIfExists(draft, arg.queryCacheKey, function(substate) {\n                    substate.status = QueryStatus.pending;\n                    substate.requestId = upserting && substate.requestId ? substate.requestId : meta.requestId;\n                    if (arg.originalArgs !== void 0) {\n                        substate.originalArgs = arg.originalArgs;\n                    }\n                    substate.startedTimeStamp = meta.startedTimeStamp;\n                });\n            }).addCase(queryThunk.fulfilled, function(draft, _j) {\n                var meta = _j.meta, payload = _j.payload;\n                updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, function(substate) {\n                    var _a;\n                    if (substate.requestId !== meta.requestId && !isUpsertQuery(meta.arg)) return;\n                    var merge = definitions[meta.arg.endpointName].merge;\n                    substate.status = QueryStatus.fulfilled;\n                    if (merge) {\n                        if (substate.data !== void 0) {\n                            var fulfilledTimeStamp_1 = meta.fulfilledTimeStamp, arg_1 = meta.arg, baseQueryMeta_1 = meta.baseQueryMeta, requestId_1 = meta.requestId;\n                            var newData = (0, import_toolkit6.createNextState)(substate.data, function(draftSubstateData) {\n                                return merge(draftSubstateData, payload, {\n                                    arg: arg_1.originalArgs,\n                                    baseQueryMeta: baseQueryMeta_1,\n                                    fulfilledTimeStamp: fulfilledTimeStamp_1,\n                                    requestId: requestId_1\n                                });\n                            });\n                            substate.data = newData;\n                        } else {\n                            substate.data = payload;\n                        }\n                    } else {\n                        substate.data = ((_a = definitions[meta.arg.endpointName].structuralSharing) != null ? _a : true) ? copyWithStructuralSharing((0, import_immer2.isDraft)(substate.data) ? (0, import_immer3.original)(substate.data) : substate.data, payload) : payload;\n                    }\n                    delete substate.error;\n                    substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n                });\n            }).addCase(queryThunk.rejected, function(draft, _j) {\n                var _k = _j.meta, condition = _k.condition, arg = _k.arg, requestId = _k.requestId, error = _j.error, payload = _j.payload;\n                updateQuerySubstateIfExists(draft, arg.queryCacheKey, function(substate) {\n                    if (condition) {} else {\n                        if (substate.requestId !== requestId) return;\n                        substate.status = QueryStatus.rejected;\n                        substate.error = payload != null ? payload : error;\n                    }\n                });\n            }).addMatcher(hasRehydrationInfo, function(draft, action) {\n                var queries = extractRehydrationInfo(action).queries;\n                for(var _j = 0, _k = Object.entries(queries); _j < _k.length; _j++){\n                    var _l = _k[_j], key = _l[0], entry = _l[1];\n                    if ((entry == null ? void 0 : entry.status) === QueryStatus.fulfilled || (entry == null ? void 0 : entry.status) === QueryStatus.rejected) {\n                        draft[key] = entry;\n                    }\n                }\n            });\n        }\n    });\n    var mutationSlice = (0, import_toolkit6.createSlice)({\n        name: reducerPath + \"/mutations\",\n        initialState: initialState,\n        reducers: {\n            removeMutationResult: {\n                reducer: function(draft, _j) {\n                    var payload = _j.payload;\n                    var cacheKey = getMutationCacheKey(payload);\n                    if (cacheKey in draft) {\n                        delete draft[cacheKey];\n                    }\n                },\n                prepare: (0, import_toolkit6.prepareAutoBatched)()\n            }\n        },\n        extraReducers: function(builder) {\n            builder.addCase(mutationThunk.pending, function(draft, _j) {\n                var meta = _j.meta, _k = _j.meta, requestId = _k.requestId, arg = _k.arg, startedTimeStamp = _k.startedTimeStamp;\n                if (!arg.track) return;\n                draft[getMutationCacheKey(meta)] = {\n                    requestId: requestId,\n                    status: QueryStatus.pending,\n                    endpointName: arg.endpointName,\n                    startedTimeStamp: startedTimeStamp\n                };\n            }).addCase(mutationThunk.fulfilled, function(draft, _j) {\n                var payload = _j.payload, meta = _j.meta;\n                if (!meta.arg.track) return;\n                updateMutationSubstateIfExists(draft, meta, function(substate) {\n                    if (substate.requestId !== meta.requestId) return;\n                    substate.status = QueryStatus.fulfilled;\n                    substate.data = payload;\n                    substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n                });\n            }).addCase(mutationThunk.rejected, function(draft, _j) {\n                var payload = _j.payload, error = _j.error, meta = _j.meta;\n                if (!meta.arg.track) return;\n                updateMutationSubstateIfExists(draft, meta, function(substate) {\n                    if (substate.requestId !== meta.requestId) return;\n                    substate.status = QueryStatus.rejected;\n                    substate.error = payload != null ? payload : error;\n                });\n            }).addMatcher(hasRehydrationInfo, function(draft, action) {\n                var mutations = extractRehydrationInfo(action).mutations;\n                for(var _j = 0, _k = Object.entries(mutations); _j < _k.length; _j++){\n                    var _l = _k[_j], key = _l[0], entry = _l[1];\n                    if (((entry == null ? void 0 : entry.status) === QueryStatus.fulfilled || (entry == null ? void 0 : entry.status) === QueryStatus.rejected) && key !== (entry == null ? void 0 : entry.requestId)) {\n                        draft[key] = entry;\n                    }\n                }\n            });\n        }\n    });\n    var invalidationSlice = (0, import_toolkit6.createSlice)({\n        name: reducerPath + \"/invalidation\",\n        initialState: initialState,\n        reducers: {\n            updateProvidedBy: {\n                reducer: function(draft, action) {\n                    var _a, _b, _c, _d;\n                    var _j = action.payload, queryCacheKey = _j.queryCacheKey, providedTags = _j.providedTags;\n                    for(var _k = 0, _l = Object.values(draft); _k < _l.length; _k++){\n                        var tagTypeSubscriptions = _l[_k];\n                        for(var _m = 0, _o = Object.values(tagTypeSubscriptions); _m < _o.length; _m++){\n                            var idSubscriptions = _o[_m];\n                            var foundAt = idSubscriptions.indexOf(queryCacheKey);\n                            if (foundAt !== -1) {\n                                idSubscriptions.splice(foundAt, 1);\n                            }\n                        }\n                    }\n                    for(var _p = 0, providedTags_1 = providedTags; _p < providedTags_1.length; _p++){\n                        var _q = providedTags_1[_p], type = _q.type, id = _q.id;\n                        var subscribedQueries = (_d = (_b = (_a = draft[type]) != null ? _a : draft[type] = {})[_c = id || \"__internal_without_id\"]) != null ? _d : _b[_c] = [];\n                        var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n                        if (!alreadySubscribed) {\n                            subscribedQueries.push(queryCacheKey);\n                        }\n                    }\n                },\n                prepare: (0, import_toolkit6.prepareAutoBatched)()\n            }\n        },\n        extraReducers: function(builder) {\n            builder.addCase(querySlice.actions.removeQueryResult, function(draft, _j) {\n                var queryCacheKey = _j.payload.queryCacheKey;\n                for(var _k = 0, _l = Object.values(draft); _k < _l.length; _k++){\n                    var tagTypeSubscriptions = _l[_k];\n                    for(var _m = 0, _o = Object.values(tagTypeSubscriptions); _m < _o.length; _m++){\n                        var idSubscriptions = _o[_m];\n                        var foundAt = idSubscriptions.indexOf(queryCacheKey);\n                        if (foundAt !== -1) {\n                            idSubscriptions.splice(foundAt, 1);\n                        }\n                    }\n                }\n            }).addMatcher(hasRehydrationInfo, function(draft, action) {\n                var _a, _b, _c, _d;\n                var provided = extractRehydrationInfo(action).provided;\n                for(var _j = 0, _k = Object.entries(provided); _j < _k.length; _j++){\n                    var _l = _k[_j], type = _l[0], incomingTags = _l[1];\n                    for(var _m = 0, _o = Object.entries(incomingTags); _m < _o.length; _m++){\n                        var _p = _o[_m], id = _p[0], cacheKeys = _p[1];\n                        var subscribedQueries = (_d = (_b = (_a = draft[type]) != null ? _a : draft[type] = {})[_c = id || \"__internal_without_id\"]) != null ? _d : _b[_c] = [];\n                        for(var _q = 0, cacheKeys_1 = cacheKeys; _q < cacheKeys_1.length; _q++){\n                            var queryCacheKey = cacheKeys_1[_q];\n                            var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n                            if (!alreadySubscribed) {\n                                subscribedQueries.push(queryCacheKey);\n                            }\n                        }\n                    }\n                }\n            }).addMatcher((0, import_toolkit6.isAnyOf)((0, import_toolkit6.isFulfilled)(queryThunk), (0, import_toolkit6.isRejectedWithValue)(queryThunk)), function(draft, action) {\n                var providedTags = calculateProvidedByThunk(action, \"providesTags\", definitions, assertTagType);\n                var queryCacheKey = action.meta.arg.queryCacheKey;\n                invalidationSlice.caseReducers.updateProvidedBy(draft, invalidationSlice.actions.updateProvidedBy({\n                    queryCacheKey: queryCacheKey,\n                    providedTags: providedTags\n                }));\n            });\n        }\n    });\n    var subscriptionSlice = (0, import_toolkit6.createSlice)({\n        name: reducerPath + \"/subscriptions\",\n        initialState: initialState,\n        reducers: {\n            updateSubscriptionOptions: function(d, a) {},\n            unsubscribeQueryResult: function(d, a) {},\n            internal_probeSubscription: function(d, a) {}\n        }\n    });\n    var internalSubscriptionsSlice = (0, import_toolkit6.createSlice)({\n        name: reducerPath + \"/internalSubscriptions\",\n        initialState: initialState,\n        reducers: {\n            subscriptionsUpdated: {\n                reducer: function(state, action) {\n                    return (0, import_immer3.applyPatches)(state, action.payload);\n                },\n                prepare: (0, import_toolkit6.prepareAutoBatched)()\n            }\n        }\n    });\n    var configSlice = (0, import_toolkit6.createSlice)({\n        name: reducerPath + \"/config\",\n        initialState: __spreadValues({\n            online: isOnline(),\n            focused: isDocumentVisible(),\n            middlewareRegistered: false\n        }, config),\n        reducers: {\n            middlewareRegistered: function(state, _j) {\n                var payload = _j.payload;\n                state.middlewareRegistered = state.middlewareRegistered === \"conflict\" || apiUid !== payload ? \"conflict\" : true;\n            }\n        },\n        extraReducers: function(builder) {\n            builder.addCase(onOnline, function(state) {\n                state.online = true;\n            }).addCase(onOffline, function(state) {\n                state.online = false;\n            }).addCase(onFocus, function(state) {\n                state.focused = true;\n            }).addCase(onFocusLost, function(state) {\n                state.focused = false;\n            }).addMatcher(hasRehydrationInfo, function(draft) {\n                return __spreadValues({}, draft);\n            });\n        }\n    });\n    var combinedReducer = (0, import_toolkit6.combineReducers)({\n        queries: querySlice.reducer,\n        mutations: mutationSlice.reducer,\n        provided: invalidationSlice.reducer,\n        subscriptions: internalSubscriptionsSlice.reducer,\n        config: configSlice.reducer\n    });\n    var reducer = function(state, action) {\n        return combinedReducer(resetApiState.match(action) ? void 0 : state, action);\n    };\n    var actions = __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, configSlice.actions), querySlice.actions), subscriptionSlice.actions), internalSubscriptionsSlice.actions), mutationSlice.actions), invalidationSlice.actions), {\n        unsubscribeMutationResult: mutationSlice.actions.removeMutationResult,\n        resetApiState: resetApiState\n    });\n    return {\n        reducer: reducer,\n        actions: actions\n    };\n}\n// src/query/core/buildSelectors.ts\nvar skipToken = /* @__PURE__ */ Symbol.for(\"RTKQ/skipToken\");\nvar skipSelector = skipToken;\nvar initialSubState = {\n    status: QueryStatus.uninitialized\n};\nvar defaultQuerySubState = /* @__PURE__ */ (0, import_toolkit7.createNextState)(initialSubState, function() {});\nvar defaultMutationSubState = /* @__PURE__ */ (0, import_toolkit7.createNextState)(initialSubState, function() {});\nfunction buildSelectors(_j) {\n    var serializeQueryArgs = _j.serializeQueryArgs, reducerPath = _j.reducerPath;\n    var selectSkippedQuery = function(state) {\n        return defaultQuerySubState;\n    };\n    var selectSkippedMutation = function(state) {\n        return defaultMutationSubState;\n    };\n    return {\n        buildQuerySelector: buildQuerySelector,\n        buildMutationSelector: buildMutationSelector,\n        selectInvalidatedBy: selectInvalidatedBy\n    };\n    function withRequestFlags(substate) {\n        return __spreadValues(__spreadValues({}, substate), getRequestStatusFlags(substate.status));\n    }\n    function selectInternalState(rootState) {\n        var state = rootState[reducerPath];\n        if (true) {\n            if (!state) {\n                if (selectInternalState.triggered) return state;\n                selectInternalState.triggered = true;\n                console.error(\"Error: No data found at `state.\" + reducerPath + \"`. Did you forget to add the reducer to the store?\");\n            }\n        }\n        return state;\n    }\n    function buildQuerySelector(endpointName, endpointDefinition) {\n        return function(queryArgs) {\n            var serializedArgs = serializeQueryArgs({\n                queryArgs: queryArgs,\n                endpointDefinition: endpointDefinition,\n                endpointName: endpointName\n            });\n            var selectQuerySubstate = function(state) {\n                var _a, _b, _c;\n                return (_c = (_b = (_a = selectInternalState(state)) == null ? void 0 : _a.queries) == null ? void 0 : _b[serializedArgs]) != null ? _c : defaultQuerySubState;\n            };\n            var finalSelectQuerySubState = queryArgs === skipToken ? selectSkippedQuery : selectQuerySubstate;\n            return (0, import_toolkit7.createSelector)(finalSelectQuerySubState, withRequestFlags);\n        };\n    }\n    function buildMutationSelector() {\n        return function(id) {\n            var _a;\n            var mutationId;\n            if (typeof id === \"object\") {\n                mutationId = (_a = getMutationCacheKey(id)) != null ? _a : skipToken;\n            } else {\n                mutationId = id;\n            }\n            var selectMutationSubstate = function(state) {\n                var _a2, _b, _c;\n                return (_c = (_b = (_a2 = selectInternalState(state)) == null ? void 0 : _a2.mutations) == null ? void 0 : _b[mutationId]) != null ? _c : defaultMutationSubState;\n            };\n            var finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;\n            return (0, import_toolkit7.createSelector)(finalSelectMutationSubstate, withRequestFlags);\n        };\n    }\n    function selectInvalidatedBy(state, tags) {\n        var _a;\n        var apiState = state[reducerPath];\n        var toInvalidate = new Set();\n        for(var _j = 0, _k = tags.map(expandTagDescription); _j < _k.length; _j++){\n            var tag = _k[_j];\n            var provided = apiState.provided[tag.type];\n            if (!provided) {\n                continue;\n            }\n            var invalidateSubscriptions = (_a = tag.id !== void 0 ? provided[tag.id] : flatten(Object.values(provided))) != null ? _a : [];\n            for(var _l = 0, invalidateSubscriptions_1 = invalidateSubscriptions; _l < invalidateSubscriptions_1.length; _l++){\n                var invalidate = invalidateSubscriptions_1[_l];\n                toInvalidate.add(invalidate);\n            }\n        }\n        return flatten(Array.from(toInvalidate.values()).map(function(queryCacheKey) {\n            var querySubState = apiState.queries[queryCacheKey];\n            return querySubState ? [\n                {\n                    queryCacheKey: queryCacheKey,\n                    endpointName: querySubState.endpointName,\n                    originalArgs: querySubState.originalArgs\n                }\n            ] : [];\n        }));\n    }\n}\n// src/query/defaultSerializeQueryArgs.ts\nvar import_toolkit8 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\nvar cache = WeakMap ? new WeakMap() : void 0;\nvar defaultSerializeQueryArgs = function(_j) {\n    var endpointName = _j.endpointName, queryArgs = _j.queryArgs;\n    var serialized = \"\";\n    var cached = cache == null ? void 0 : cache.get(queryArgs);\n    if (typeof cached === \"string\") {\n        serialized = cached;\n    } else {\n        var stringified = JSON.stringify(queryArgs, function(key, value) {\n            return (0, import_toolkit8.isPlainObject)(value) ? Object.keys(value).sort().reduce(function(acc, key2) {\n                acc[key2] = value[key2];\n                return acc;\n            }, {}) : value;\n        });\n        if ((0, import_toolkit8.isPlainObject)(queryArgs)) {\n            cache == null ? void 0 : cache.set(queryArgs, stringified);\n        }\n        serialized = stringified;\n    }\n    return endpointName + \"(\" + serialized + \")\";\n};\n// src/query/createApi.ts\nvar import_toolkit9 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\nvar import_reselect = __toModule(__webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/es/index.js\"));\nfunction buildCreateApi() {\n    var modules = [];\n    for(var _j = 0; _j < arguments.length; _j++){\n        modules[_j] = arguments[_j];\n    }\n    return function baseCreateApi(options) {\n        var extractRehydrationInfo = (0, import_reselect.defaultMemoize)(function(action) {\n            var _a, _b;\n            return (_b = options.extractRehydrationInfo) == null ? void 0 : _b.call(options, action, {\n                reducerPath: (_a = options.reducerPath) != null ? _a : \"api\"\n            });\n        });\n        var optionsWithDefaults = __spreadProps(__spreadValues({\n            reducerPath: \"api\",\n            keepUnusedDataFor: 60,\n            refetchOnMountOrArgChange: false,\n            refetchOnFocus: false,\n            refetchOnReconnect: false\n        }, options), {\n            extractRehydrationInfo: extractRehydrationInfo,\n            serializeQueryArgs: function(queryArgsApi) {\n                var finalSerializeQueryArgs = defaultSerializeQueryArgs;\n                if (\"serializeQueryArgs\" in queryArgsApi.endpointDefinition) {\n                    var endpointSQA_1 = queryArgsApi.endpointDefinition.serializeQueryArgs;\n                    finalSerializeQueryArgs = function(queryArgsApi2) {\n                        var initialResult = endpointSQA_1(queryArgsApi2);\n                        if (typeof initialResult === \"string\") {\n                            return initialResult;\n                        } else {\n                            return defaultSerializeQueryArgs(__spreadProps(__spreadValues({}, queryArgsApi2), {\n                                queryArgs: initialResult\n                            }));\n                        }\n                    };\n                } else if (options.serializeQueryArgs) {\n                    finalSerializeQueryArgs = options.serializeQueryArgs;\n                }\n                return finalSerializeQueryArgs(queryArgsApi);\n            },\n            tagTypes: __spreadArray([], options.tagTypes || [])\n        });\n        var context = {\n            endpointDefinitions: {},\n            batch: function(fn) {\n                fn();\n            },\n            apiUid: (0, import_toolkit9.nanoid)(),\n            extractRehydrationInfo: extractRehydrationInfo,\n            hasRehydrationInfo: (0, import_reselect.defaultMemoize)(function(action) {\n                return extractRehydrationInfo(action) != null;\n            })\n        };\n        var api = {\n            injectEndpoints: injectEndpoints,\n            enhanceEndpoints: function(_j) {\n                var addTagTypes = _j.addTagTypes, endpoints = _j.endpoints;\n                if (addTagTypes) {\n                    for(var _k = 0, addTagTypes_1 = addTagTypes; _k < addTagTypes_1.length; _k++){\n                        var eT = addTagTypes_1[_k];\n                        if (!optionsWithDefaults.tagTypes.includes(eT)) {\n                            ;\n                            optionsWithDefaults.tagTypes.push(eT);\n                        }\n                    }\n                }\n                if (endpoints) {\n                    for(var _l = 0, _m = Object.entries(endpoints); _l < _m.length; _l++){\n                        var _o = _m[_l], endpointName = _o[0], partialDefinition = _o[1];\n                        if (typeof partialDefinition === \"function\") {\n                            partialDefinition(context.endpointDefinitions[endpointName]);\n                        } else {\n                            Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\n                        }\n                    }\n                }\n                return api;\n            }\n        };\n        var initializedModules = modules.map(function(m) {\n            return m.init(api, optionsWithDefaults, context);\n        });\n        function injectEndpoints(inject) {\n            var evaluatedEndpoints = inject.endpoints({\n                query: function(x) {\n                    return __spreadProps(__spreadValues({}, x), {\n                        type: DefinitionType.query\n                    });\n                },\n                mutation: function(x) {\n                    return __spreadProps(__spreadValues({}, x), {\n                        type: DefinitionType.mutation\n                    });\n                }\n            });\n            for(var _j = 0, _k = Object.entries(evaluatedEndpoints); _j < _k.length; _j++){\n                var _l = _k[_j], endpointName = _l[0], definition = _l[1];\n                if (!inject.overrideExisting && endpointName in context.endpointDefinitions) {\n                    if (typeof process !== \"undefined\" && true) {\n                        console.error(\"called `injectEndpoints` to override already-existing endpointName \" + endpointName + \" without specifying `overrideExisting: true`\");\n                    }\n                    continue;\n                }\n                context.endpointDefinitions[endpointName] = definition;\n                for(var _m = 0, initializedModules_1 = initializedModules; _m < initializedModules_1.length; _m++){\n                    var m = initializedModules_1[_m];\n                    m.injectEndpoint(endpointName, definition);\n                }\n            }\n            return api;\n        }\n        return api.injectEndpoints({\n            endpoints: options.endpoints\n        });\n    };\n}\n// src/query/fakeBaseQuery.ts\nfunction fakeBaseQuery() {\n    return function() {\n        throw new Error(\"When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.\");\n    };\n}\n// src/query/core/buildMiddleware/index.ts\nvar import_toolkit13 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\n// src/query/core/buildMiddleware/cacheCollection.ts\nfunction isObjectEmpty(obj) {\n    for(var k in obj){\n        return false;\n    }\n    return true;\n}\nvar THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;\nvar buildCacheCollectionHandler = function(_j) {\n    var reducerPath = _j.reducerPath, api = _j.api, context = _j.context, internalState = _j.internalState;\n    var _k = api.internalActions, removeQueryResult = _k.removeQueryResult, unsubscribeQueryResult = _k.unsubscribeQueryResult;\n    function anySubscriptionsRemainingForKey(queryCacheKey) {\n        var subscriptions = internalState.currentSubscriptions[queryCacheKey];\n        return !!subscriptions && !isObjectEmpty(subscriptions);\n    }\n    var currentRemovalTimeouts = {};\n    var handler = function(action, mwApi, internalState2) {\n        var _a;\n        if (unsubscribeQueryResult.match(action)) {\n            var state = mwApi.getState()[reducerPath];\n            var queryCacheKey = action.payload.queryCacheKey;\n            handleUnsubscribe(queryCacheKey, (_a = state.queries[queryCacheKey]) == null ? void 0 : _a.endpointName, mwApi, state.config);\n        }\n        if (api.util.resetApiState.match(action)) {\n            for(var _j = 0, _k = Object.entries(currentRemovalTimeouts); _j < _k.length; _j++){\n                var _l = _k[_j], key = _l[0], timeout = _l[1];\n                if (timeout) clearTimeout(timeout);\n                delete currentRemovalTimeouts[key];\n            }\n        }\n        if (context.hasRehydrationInfo(action)) {\n            var state = mwApi.getState()[reducerPath];\n            var queries = context.extractRehydrationInfo(action).queries;\n            for(var _m = 0, _o = Object.entries(queries); _m < _o.length; _m++){\n                var _p = _o[_m], queryCacheKey = _p[0], queryState = _p[1];\n                handleUnsubscribe(queryCacheKey, queryState == null ? void 0 : queryState.endpointName, mwApi, state.config);\n            }\n        }\n    };\n    function handleUnsubscribe(queryCacheKey, endpointName, api2, config) {\n        var _a;\n        var endpointDefinition = context.endpointDefinitions[endpointName];\n        var keepUnusedDataFor = (_a = endpointDefinition == null ? void 0 : endpointDefinition.keepUnusedDataFor) != null ? _a : config.keepUnusedDataFor;\n        if (keepUnusedDataFor === Infinity) {\n            return;\n        }\n        var finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n            var currentTimeout = currentRemovalTimeouts[queryCacheKey];\n            if (currentTimeout) {\n                clearTimeout(currentTimeout);\n            }\n            currentRemovalTimeouts[queryCacheKey] = setTimeout(function() {\n                if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n                    api2.dispatch(removeQueryResult({\n                        queryCacheKey: queryCacheKey\n                    }));\n                }\n                delete currentRemovalTimeouts[queryCacheKey];\n            }, finalKeepUnusedDataFor * 1e3);\n        }\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/invalidationByTags.ts\nvar import_toolkit10 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\nvar buildInvalidationByTagsHandler = function(_j) {\n    var reducerPath = _j.reducerPath, context = _j.context, endpointDefinitions = _j.context.endpointDefinitions, mutationThunk = _j.mutationThunk, api = _j.api, assertTagType = _j.assertTagType, refetchQuery = _j.refetchQuery;\n    var removeQueryResult = api.internalActions.removeQueryResult;\n    var isThunkActionWithTags = (0, import_toolkit10.isAnyOf)((0, import_toolkit10.isFulfilled)(mutationThunk), (0, import_toolkit10.isRejectedWithValue)(mutationThunk));\n    var handler = function(action, mwApi) {\n        if (isThunkActionWithTags(action)) {\n            invalidateTags(calculateProvidedByThunk(action, \"invalidatesTags\", endpointDefinitions, assertTagType), mwApi);\n        }\n        if (api.util.invalidateTags.match(action)) {\n            invalidateTags(calculateProvidedBy(action.payload, void 0, void 0, void 0, void 0, assertTagType), mwApi);\n        }\n    };\n    function invalidateTags(tags, mwApi) {\n        var rootState = mwApi.getState();\n        var state = rootState[reducerPath];\n        var toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\n        context.batch(function() {\n            var _a;\n            var valuesArray = Array.from(toInvalidate.values());\n            for(var _j = 0, valuesArray_1 = valuesArray; _j < valuesArray_1.length; _j++){\n                var queryCacheKey = valuesArray_1[_j].queryCacheKey;\n                var querySubState = state.queries[queryCacheKey];\n                var subscriptionSubState = (_a = state.subscriptions[queryCacheKey]) != null ? _a : {};\n                if (querySubState) {\n                    if (Object.keys(subscriptionSubState).length === 0) {\n                        mwApi.dispatch(removeQueryResult({\n                            queryCacheKey: queryCacheKey\n                        }));\n                    } else if (querySubState.status !== QueryStatus.uninitialized) {\n                        mwApi.dispatch(refetchQuery(querySubState, queryCacheKey));\n                    }\n                }\n            }\n        });\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/polling.ts\nvar buildPollingHandler = function(_j) {\n    var reducerPath = _j.reducerPath, queryThunk = _j.queryThunk, api = _j.api, refetchQuery = _j.refetchQuery, internalState = _j.internalState;\n    var currentPolls = {};\n    var handler = function(action, mwApi) {\n        if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\n            updatePollingInterval(action.payload, mwApi);\n        }\n        if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\n            updatePollingInterval(action.meta.arg, mwApi);\n        }\n        if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\n            startNextPoll(action.meta.arg, mwApi);\n        }\n        if (api.util.resetApiState.match(action)) {\n            clearPolls();\n        }\n    };\n    function startNextPoll(_j, api2) {\n        var queryCacheKey = _j.queryCacheKey;\n        var state = api2.getState()[reducerPath];\n        var querySubState = state.queries[queryCacheKey];\n        var subscriptions = internalState.currentSubscriptions[queryCacheKey];\n        if (!querySubState || querySubState.status === QueryStatus.uninitialized) return;\n        var lowestPollingInterval = findLowestPollingInterval(subscriptions);\n        if (!Number.isFinite(lowestPollingInterval)) return;\n        var currentPoll = currentPolls[queryCacheKey];\n        if (currentPoll == null ? void 0 : currentPoll.timeout) {\n            clearTimeout(currentPoll.timeout);\n            currentPoll.timeout = void 0;\n        }\n        var nextPollTimestamp = Date.now() + lowestPollingInterval;\n        var currentInterval = currentPolls[queryCacheKey] = {\n            nextPollTimestamp: nextPollTimestamp,\n            pollingInterval: lowestPollingInterval,\n            timeout: setTimeout(function() {\n                currentInterval.timeout = void 0;\n                api2.dispatch(refetchQuery(querySubState, queryCacheKey));\n            }, lowestPollingInterval)\n        };\n    }\n    function updatePollingInterval(_j, api2) {\n        var queryCacheKey = _j.queryCacheKey;\n        var state = api2.getState()[reducerPath];\n        var querySubState = state.queries[queryCacheKey];\n        var subscriptions = internalState.currentSubscriptions[queryCacheKey];\n        if (!querySubState || querySubState.status === QueryStatus.uninitialized) {\n            return;\n        }\n        var lowestPollingInterval = findLowestPollingInterval(subscriptions);\n        if (!Number.isFinite(lowestPollingInterval)) {\n            cleanupPollForKey(queryCacheKey);\n            return;\n        }\n        var currentPoll = currentPolls[queryCacheKey];\n        var nextPollTimestamp = Date.now() + lowestPollingInterval;\n        if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\n            startNextPoll({\n                queryCacheKey: queryCacheKey\n            }, api2);\n        }\n    }\n    function cleanupPollForKey(key) {\n        var existingPoll = currentPolls[key];\n        if (existingPoll == null ? void 0 : existingPoll.timeout) {\n            clearTimeout(existingPoll.timeout);\n        }\n        delete currentPolls[key];\n    }\n    function clearPolls() {\n        for(var _j = 0, _k = Object.keys(currentPolls); _j < _k.length; _j++){\n            var key = _k[_j];\n            cleanupPollForKey(key);\n        }\n    }\n    function findLowestPollingInterval(subscribers) {\n        if (subscribers === void 0) {\n            subscribers = {};\n        }\n        var lowestPollingInterval = Number.POSITIVE_INFINITY;\n        for(var key in subscribers){\n            if (!!subscribers[key].pollingInterval) {\n                lowestPollingInterval = Math.min(subscribers[key].pollingInterval, lowestPollingInterval);\n            }\n        }\n        return lowestPollingInterval;\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/windowEventHandling.ts\nvar buildWindowEventHandler = function(_j) {\n    var reducerPath = _j.reducerPath, context = _j.context, api = _j.api, refetchQuery = _j.refetchQuery, internalState = _j.internalState;\n    var removeQueryResult = api.internalActions.removeQueryResult;\n    var handler = function(action, mwApi) {\n        if (onFocus.match(action)) {\n            refetchValidQueries(mwApi, \"refetchOnFocus\");\n        }\n        if (onOnline.match(action)) {\n            refetchValidQueries(mwApi, \"refetchOnReconnect\");\n        }\n    };\n    function refetchValidQueries(api2, type) {\n        var state = api2.getState()[reducerPath];\n        var queries = state.queries;\n        var subscriptions = internalState.currentSubscriptions;\n        context.batch(function() {\n            for(var _j = 0, _k = Object.keys(subscriptions); _j < _k.length; _j++){\n                var queryCacheKey = _k[_j];\n                var querySubState = queries[queryCacheKey];\n                var subscriptionSubState = subscriptions[queryCacheKey];\n                if (!subscriptionSubState || !querySubState) continue;\n                var shouldRefetch = Object.values(subscriptionSubState).some(function(sub) {\n                    return sub[type] === true;\n                }) || Object.values(subscriptionSubState).every(function(sub) {\n                    return sub[type] === void 0;\n                }) && state.config[type];\n                if (shouldRefetch) {\n                    if (Object.keys(subscriptionSubState).length === 0) {\n                        api2.dispatch(removeQueryResult({\n                            queryCacheKey: queryCacheKey\n                        }));\n                    } else if (querySubState.status !== QueryStatus.uninitialized) {\n                        api2.dispatch(refetchQuery(querySubState, queryCacheKey));\n                    }\n                }\n            }\n        });\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/cacheLifecycle.ts\nvar import_toolkit11 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\nvar neverResolvedError = new Error(\"Promise never resolved before cacheEntryRemoved.\");\nvar buildCacheLifecycleHandler = function(_j) {\n    var api = _j.api, reducerPath = _j.reducerPath, context = _j.context, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk, internalState = _j.internalState;\n    var isQueryThunk = (0, import_toolkit11.isAsyncThunkAction)(queryThunk);\n    var isMutationThunk = (0, import_toolkit11.isAsyncThunkAction)(mutationThunk);\n    var isFulfilledThunk = (0, import_toolkit11.isFulfilled)(queryThunk, mutationThunk);\n    var lifecycleMap = {};\n    var handler = function(action, mwApi, stateBefore) {\n        var cacheKey = getCacheKey(action);\n        if (queryThunk.pending.match(action)) {\n            var oldState = stateBefore[reducerPath].queries[cacheKey];\n            var state = mwApi.getState()[reducerPath].queries[cacheKey];\n            if (!oldState && state) {\n                handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n            }\n        } else if (mutationThunk.pending.match(action)) {\n            var state = mwApi.getState()[reducerPath].mutations[cacheKey];\n            if (state) {\n                handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n            }\n        } else if (isFulfilledThunk(action)) {\n            var lifecycle = lifecycleMap[cacheKey];\n            if (lifecycle == null ? void 0 : lifecycle.valueResolved) {\n                lifecycle.valueResolved({\n                    data: action.payload,\n                    meta: action.meta.baseQueryMeta\n                });\n                delete lifecycle.valueResolved;\n            }\n        } else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\n            var lifecycle = lifecycleMap[cacheKey];\n            if (lifecycle) {\n                delete lifecycleMap[cacheKey];\n                lifecycle.cacheEntryRemoved();\n            }\n        } else if (api.util.resetApiState.match(action)) {\n            for(var _j = 0, _k = Object.entries(lifecycleMap); _j < _k.length; _j++){\n                var _l = _k[_j], cacheKey2 = _l[0], lifecycle = _l[1];\n                delete lifecycleMap[cacheKey2];\n                lifecycle.cacheEntryRemoved();\n            }\n        }\n    };\n    function getCacheKey(action) {\n        if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;\n        if (isMutationThunk(action)) return action.meta.requestId;\n        if (api.internalActions.removeQueryResult.match(action)) return action.payload.queryCacheKey;\n        if (api.internalActions.removeMutationResult.match(action)) return getMutationCacheKey(action.payload);\n        return \"\";\n    }\n    function handleNewKey(endpointName, originalArgs, queryCacheKey, mwApi, requestId) {\n        var endpointDefinition = context.endpointDefinitions[endpointName];\n        var onCacheEntryAdded = endpointDefinition == null ? void 0 : endpointDefinition.onCacheEntryAdded;\n        if (!onCacheEntryAdded) return;\n        var lifecycle = {};\n        var cacheEntryRemoved = new Promise(function(resolve) {\n            lifecycle.cacheEntryRemoved = resolve;\n        });\n        var cacheDataLoaded = Promise.race([\n            new Promise(function(resolve) {\n                lifecycle.valueResolved = resolve;\n            }),\n            cacheEntryRemoved.then(function() {\n                throw neverResolvedError;\n            })\n        ]);\n        cacheDataLoaded.catch(function() {});\n        lifecycleMap[queryCacheKey] = lifecycle;\n        var selector = api.endpoints[endpointName].select(endpointDefinition.type === DefinitionType.query ? originalArgs : queryCacheKey);\n        var extra = mwApi.dispatch(function(_, __, extra2) {\n            return extra2;\n        });\n        var lifecycleApi = __spreadProps(__spreadValues({}, mwApi), {\n            getCacheEntry: function() {\n                return selector(mwApi.getState());\n            },\n            requestId: requestId,\n            extra: extra,\n            updateCachedData: endpointDefinition.type === DefinitionType.query ? function(updateRecipe) {\n                return mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe));\n            } : void 0,\n            cacheDataLoaded: cacheDataLoaded,\n            cacheEntryRemoved: cacheEntryRemoved\n        });\n        var runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);\n        Promise.resolve(runningHandler).catch(function(e) {\n            if (e === neverResolvedError) return;\n            throw e;\n        });\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/queryLifecycle.ts\nvar import_toolkit12 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\"));\nvar buildQueryLifecycleHandler = function(_j) {\n    var api = _j.api, context = _j.context, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk;\n    var isPendingThunk = (0, import_toolkit12.isPending)(queryThunk, mutationThunk);\n    var isRejectedThunk = (0, import_toolkit12.isRejected)(queryThunk, mutationThunk);\n    var isFullfilledThunk = (0, import_toolkit12.isFulfilled)(queryThunk, mutationThunk);\n    var lifecycleMap = {};\n    var handler = function(action, mwApi) {\n        var _a, _b, _c;\n        if (isPendingThunk(action)) {\n            var _j = action.meta, requestId = _j.requestId, _k = _j.arg, endpointName_1 = _k.endpointName, originalArgs_1 = _k.originalArgs;\n            var endpointDefinition = context.endpointDefinitions[endpointName_1];\n            var onQueryStarted = endpointDefinition == null ? void 0 : endpointDefinition.onQueryStarted;\n            if (onQueryStarted) {\n                var lifecycle_1 = {};\n                var queryFulfilled = new Promise(function(resolve, reject) {\n                    lifecycle_1.resolve = resolve;\n                    lifecycle_1.reject = reject;\n                });\n                queryFulfilled.catch(function() {});\n                lifecycleMap[requestId] = lifecycle_1;\n                var selector_1 = api.endpoints[endpointName_1].select(endpointDefinition.type === DefinitionType.query ? originalArgs_1 : requestId);\n                var extra = mwApi.dispatch(function(_, __, extra2) {\n                    return extra2;\n                });\n                var lifecycleApi = __spreadProps(__spreadValues({}, mwApi), {\n                    getCacheEntry: function() {\n                        return selector_1(mwApi.getState());\n                    },\n                    requestId: requestId,\n                    extra: extra,\n                    updateCachedData: endpointDefinition.type === DefinitionType.query ? function(updateRecipe) {\n                        return mwApi.dispatch(api.util.updateQueryData(endpointName_1, originalArgs_1, updateRecipe));\n                    } : void 0,\n                    queryFulfilled: queryFulfilled\n                });\n                onQueryStarted(originalArgs_1, lifecycleApi);\n            }\n        } else if (isFullfilledThunk(action)) {\n            var _l = action.meta, requestId = _l.requestId, baseQueryMeta = _l.baseQueryMeta;\n            (_a = lifecycleMap[requestId]) == null ? void 0 : _a.resolve({\n                data: action.payload,\n                meta: baseQueryMeta\n            });\n            delete lifecycleMap[requestId];\n        } else if (isRejectedThunk(action)) {\n            var _m = action.meta, requestId = _m.requestId, rejectedWithValue = _m.rejectedWithValue, baseQueryMeta = _m.baseQueryMeta;\n            (_c = lifecycleMap[requestId]) == null ? void 0 : _c.reject({\n                error: (_b = action.payload) != null ? _b : action.error,\n                isUnhandledError: !rejectedWithValue,\n                meta: baseQueryMeta\n            });\n            delete lifecycleMap[requestId];\n        }\n    };\n    return handler;\n};\n// src/query/core/buildMiddleware/devMiddleware.ts\nvar buildDevCheckHandler = function(_j) {\n    var api = _j.api, apiUid = _j.context.apiUid, reducerPath = _j.reducerPath;\n    return function(action, mwApi) {\n        var _a, _b;\n        if (api.util.resetApiState.match(action)) {\n            mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n        }\n        if (typeof process !== \"undefined\" && true) {\n            if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && ((_b = (_a = mwApi.getState()[reducerPath]) == null ? void 0 : _a.config) == null ? void 0 : _b.middlewareRegistered) === \"conflict\") {\n                console.warn('There is a mismatch between slice and middleware for the reducerPath \"' + reducerPath + '\".\\nYou can only have one api per reducer path, this will lead to crashes in various situations!' + (reducerPath === \"api\" ? \"\\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!\" : \"\"));\n            }\n        }\n    };\n};\n// src/query/core/buildMiddleware/batchActions.ts\nvar import_immer4 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\nvar promise;\nvar queueMicrotaskShim = typeof queueMicrotask === \"function\" ? queueMicrotask.bind( false ? 0 : typeof global !== \"undefined\" ? global : globalThis) : function(cb) {\n    return (promise || (promise = Promise.resolve())).then(cb).catch(function(err) {\n        return setTimeout(function() {\n            throw err;\n        }, 0);\n    });\n};\nvar buildBatchedActionsHandler = function(_j) {\n    var api = _j.api, queryThunk = _j.queryThunk, internalState = _j.internalState;\n    var subscriptionsPrefix = api.reducerPath + \"/subscriptions\";\n    var previousSubscriptions = null;\n    var dispatchQueued = false;\n    var _k = api.internalActions, updateSubscriptionOptions = _k.updateSubscriptionOptions, unsubscribeQueryResult = _k.unsubscribeQueryResult;\n    var actuallyMutateSubscriptions = function(mutableState, action) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n        if (updateSubscriptionOptions.match(action)) {\n            var _j = action.payload, queryCacheKey = _j.queryCacheKey, requestId = _j.requestId, options = _j.options;\n            if ((_a = mutableState == null ? void 0 : mutableState[queryCacheKey]) == null ? void 0 : _a[requestId]) {\n                mutableState[queryCacheKey][requestId] = options;\n            }\n            return true;\n        }\n        if (unsubscribeQueryResult.match(action)) {\n            var _k = action.payload, queryCacheKey = _k.queryCacheKey, requestId = _k.requestId;\n            if (mutableState[queryCacheKey]) {\n                delete mutableState[queryCacheKey][requestId];\n            }\n            return true;\n        }\n        if (api.internalActions.removeQueryResult.match(action)) {\n            delete mutableState[action.payload.queryCacheKey];\n            return true;\n        }\n        if (queryThunk.pending.match(action)) {\n            var _l = action.meta, arg = _l.arg, requestId = _l.requestId;\n            if (arg.subscribe) {\n                var substate = (_c = mutableState[_b = arg.queryCacheKey]) != null ? _c : mutableState[_b] = {};\n                substate[requestId] = (_e = (_d = arg.subscriptionOptions) != null ? _d : substate[requestId]) != null ? _e : {};\n                return true;\n            }\n        }\n        if (queryThunk.rejected.match(action)) {\n            var _m = action.meta, condition = _m.condition, arg = _m.arg, requestId = _m.requestId;\n            if (condition && arg.subscribe) {\n                var substate = (_g = mutableState[_f = arg.queryCacheKey]) != null ? _g : mutableState[_f] = {};\n                substate[requestId] = (_i = (_h = arg.subscriptionOptions) != null ? _h : substate[requestId]) != null ? _i : {};\n                return true;\n            }\n        }\n        return false;\n    };\n    return function(action, mwApi) {\n        var _a, _b;\n        if (!previousSubscriptions) {\n            previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n        }\n        if (api.util.resetApiState.match(action)) {\n            previousSubscriptions = internalState.currentSubscriptions = {};\n            return [\n                true,\n                false\n            ];\n        }\n        if (api.internalActions.internal_probeSubscription.match(action)) {\n            var _j = action.payload, queryCacheKey = _j.queryCacheKey, requestId = _j.requestId;\n            var hasSubscription = !!((_a = internalState.currentSubscriptions[queryCacheKey]) == null ? void 0 : _a[requestId]);\n            return [\n                false,\n                hasSubscription\n            ];\n        }\n        var didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);\n        if (didMutate) {\n            if (!dispatchQueued) {\n                queueMicrotaskShim(function() {\n                    var newSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n                    var _j = (0, import_immer4.produceWithPatches)(previousSubscriptions, function() {\n                        return newSubscriptions;\n                    }), patches = _j[1];\n                    mwApi.next(api.internalActions.subscriptionsUpdated(patches));\n                    previousSubscriptions = newSubscriptions;\n                    dispatchQueued = false;\n                });\n                dispatchQueued = true;\n            }\n            var isSubscriptionSliceAction = !!((_b = action.type) == null ? void 0 : _b.startsWith(subscriptionsPrefix));\n            var isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;\n            var actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;\n            return [\n                actionShouldContinue,\n                false\n            ];\n        }\n        return [\n            true,\n            false\n        ];\n    };\n};\n// src/query/core/buildMiddleware/index.ts\nfunction buildMiddleware(input) {\n    var reducerPath = input.reducerPath, queryThunk = input.queryThunk, api = input.api, context = input.context;\n    var apiUid = context.apiUid;\n    var actions = {\n        invalidateTags: (0, import_toolkit13.createAction)(reducerPath + \"/invalidateTags\")\n    };\n    var isThisApiSliceAction = function(action) {\n        return !!action && typeof action.type === \"string\" && action.type.startsWith(reducerPath + \"/\");\n    };\n    var handlerBuilders = [\n        buildDevCheckHandler,\n        buildCacheCollectionHandler,\n        buildInvalidationByTagsHandler,\n        buildPollingHandler,\n        buildCacheLifecycleHandler,\n        buildQueryLifecycleHandler\n    ];\n    var middleware = function(mwApi) {\n        var initialized2 = false;\n        var internalState = {\n            currentSubscriptions: {}\n        };\n        var builderArgs = __spreadProps(__spreadValues({}, input), {\n            internalState: internalState,\n            refetchQuery: refetchQuery\n        });\n        var handlers = handlerBuilders.map(function(build) {\n            return build(builderArgs);\n        });\n        var batchedActionsHandler = buildBatchedActionsHandler(builderArgs);\n        var windowEventsHandler = buildWindowEventHandler(builderArgs);\n        return function(next) {\n            return function(action) {\n                if (!initialized2) {\n                    initialized2 = true;\n                    mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n                }\n                var mwApiWithNext = __spreadProps(__spreadValues({}, mwApi), {\n                    next: next\n                });\n                var stateBefore = mwApi.getState();\n                var _j = batchedActionsHandler(action, mwApiWithNext, stateBefore), actionShouldContinue = _j[0], hasSubscription = _j[1];\n                var res;\n                if (actionShouldContinue) {\n                    res = next(action);\n                } else {\n                    res = hasSubscription;\n                }\n                if (!!mwApi.getState()[reducerPath]) {\n                    windowEventsHandler(action, mwApiWithNext, stateBefore);\n                    if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {\n                        for(var _k = 0, handlers_1 = handlers; _k < handlers_1.length; _k++){\n                            var handler = handlers_1[_k];\n                            handler(action, mwApiWithNext, stateBefore);\n                        }\n                    }\n                }\n                return res;\n            };\n        };\n    };\n    return {\n        middleware: middleware,\n        actions: actions\n    };\n    function refetchQuery(querySubState, queryCacheKey, override) {\n        if (override === void 0) {\n            override = {};\n        }\n        return queryThunk(__spreadValues({\n            type: \"query\",\n            endpointName: querySubState.endpointName,\n            originalArgs: querySubState.originalArgs,\n            subscribe: false,\n            forceRefetch: true,\n            queryCacheKey: queryCacheKey\n        }, override));\n    }\n}\n// src/query/tsHelpers.ts\nfunction assertCast(v) {}\nfunction safeAssign(target) {\n    var args = [];\n    for(var _j = 1; _j < arguments.length; _j++){\n        args[_j - 1] = arguments[_j];\n    }\n    Object.assign.apply(Object, __spreadArray([\n        target\n    ], args));\n}\n// src/query/core/module.ts\nvar import_immer5 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\nvar coreModuleName = /* @__PURE__ */ Symbol();\nvar coreModule = function() {\n    return {\n        name: coreModuleName,\n        init: function(api, _j, context) {\n            var baseQuery = _j.baseQuery, tagTypes = _j.tagTypes, reducerPath = _j.reducerPath, serializeQueryArgs = _j.serializeQueryArgs, keepUnusedDataFor = _j.keepUnusedDataFor, refetchOnMountOrArgChange = _j.refetchOnMountOrArgChange, refetchOnFocus = _j.refetchOnFocus, refetchOnReconnect = _j.refetchOnReconnect;\n            (0, import_immer5.enablePatches)();\n            assertCast(serializeQueryArgs);\n            var assertTagType = function(tag) {\n                if (typeof process !== \"undefined\" && true) {\n                    if (!tagTypes.includes(tag.type)) {\n                        console.error(\"Tag type '\" + tag.type + \"' was used, but not specified in `tagTypes`!\");\n                    }\n                }\n                return tag;\n            };\n            Object.assign(api, {\n                reducerPath: reducerPath,\n                endpoints: {},\n                internalActions: {\n                    onOnline: onOnline,\n                    onOffline: onOffline,\n                    onFocus: onFocus,\n                    onFocusLost: onFocusLost\n                },\n                util: {}\n            });\n            var _k = buildThunks({\n                baseQuery: baseQuery,\n                reducerPath: reducerPath,\n                context: context,\n                api: api,\n                serializeQueryArgs: serializeQueryArgs,\n                assertTagType: assertTagType\n            }), queryThunk = _k.queryThunk, mutationThunk = _k.mutationThunk, patchQueryData = _k.patchQueryData, updateQueryData = _k.updateQueryData, upsertQueryData = _k.upsertQueryData, prefetch = _k.prefetch, buildMatchThunkActions = _k.buildMatchThunkActions;\n            var _l = buildSlice({\n                context: context,\n                queryThunk: queryThunk,\n                mutationThunk: mutationThunk,\n                reducerPath: reducerPath,\n                assertTagType: assertTagType,\n                config: {\n                    refetchOnFocus: refetchOnFocus,\n                    refetchOnReconnect: refetchOnReconnect,\n                    refetchOnMountOrArgChange: refetchOnMountOrArgChange,\n                    keepUnusedDataFor: keepUnusedDataFor,\n                    reducerPath: reducerPath\n                }\n            }), reducer = _l.reducer, sliceActions = _l.actions;\n            safeAssign(api.util, {\n                patchQueryData: patchQueryData,\n                updateQueryData: updateQueryData,\n                upsertQueryData: upsertQueryData,\n                prefetch: prefetch,\n                resetApiState: sliceActions.resetApiState\n            });\n            safeAssign(api.internalActions, sliceActions);\n            var _m = buildMiddleware({\n                reducerPath: reducerPath,\n                context: context,\n                queryThunk: queryThunk,\n                mutationThunk: mutationThunk,\n                api: api,\n                assertTagType: assertTagType\n            }), middleware = _m.middleware, middlewareActions = _m.actions;\n            safeAssign(api.util, middlewareActions);\n            safeAssign(api, {\n                reducer: reducer,\n                middleware: middleware\n            });\n            var _o = buildSelectors({\n                serializeQueryArgs: serializeQueryArgs,\n                reducerPath: reducerPath\n            }), buildQuerySelector = _o.buildQuerySelector, buildMutationSelector = _o.buildMutationSelector, selectInvalidatedBy = _o.selectInvalidatedBy;\n            safeAssign(api.util, {\n                selectInvalidatedBy: selectInvalidatedBy\n            });\n            var _p = buildInitiate({\n                queryThunk: queryThunk,\n                mutationThunk: mutationThunk,\n                api: api,\n                serializeQueryArgs: serializeQueryArgs,\n                context: context\n            }), buildInitiateQuery = _p.buildInitiateQuery, buildInitiateMutation = _p.buildInitiateMutation, getRunningMutationThunk = _p.getRunningMutationThunk, getRunningMutationsThunk = _p.getRunningMutationsThunk, getRunningQueriesThunk = _p.getRunningQueriesThunk, getRunningQueryThunk = _p.getRunningQueryThunk, getRunningOperationPromises = _p.getRunningOperationPromises, removalWarning = _p.removalWarning;\n            safeAssign(api.util, {\n                getRunningOperationPromises: getRunningOperationPromises,\n                getRunningOperationPromise: removalWarning,\n                getRunningMutationThunk: getRunningMutationThunk,\n                getRunningMutationsThunk: getRunningMutationsThunk,\n                getRunningQueryThunk: getRunningQueryThunk,\n                getRunningQueriesThunk: getRunningQueriesThunk\n            });\n            return {\n                name: coreModuleName,\n                injectEndpoint: function(endpointName, definition) {\n                    var _a, _b;\n                    var anyApi = api;\n                    (_b = (_a = anyApi.endpoints)[endpointName]) != null ? _b : _a[endpointName] = {};\n                    if (isQueryDefinition(definition)) {\n                        safeAssign(anyApi.endpoints[endpointName], {\n                            name: endpointName,\n                            select: buildQuerySelector(endpointName, definition),\n                            initiate: buildInitiateQuery(endpointName, definition)\n                        }, buildMatchThunkActions(queryThunk, endpointName));\n                    } else if (isMutationDefinition(definition)) {\n                        safeAssign(anyApi.endpoints[endpointName], {\n                            name: endpointName,\n                            select: buildMutationSelector(),\n                            initiate: buildInitiateMutation(endpointName)\n                        }, buildMatchThunkActions(mutationThunk, endpointName));\n                    }\n                }\n            };\n        }\n    };\n};\n// src/query/core/index.ts\nvar createApi = /* @__PURE__ */ buildCreateApi(coreModule()); //# sourceMappingURL=rtk-query.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.cjs.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnhancerArray: () => (/* binding */ EnhancerArray),\n/* harmony export */   MiddlewareArray: () => (/* binding */ MiddlewareArray),\n/* harmony export */   SHOULD_AUTOBATCH: () => (/* binding */ SHOULD_AUTOBATCH),\n/* harmony export */   TaskAbortError: () => (/* binding */ TaskAbortError),\n/* harmony export */   __DO_NOT_USE__ActionTypes: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.__DO_NOT_USE__ActionTypes),\n/* harmony export */   addListener: () => (/* binding */ addListener),\n/* harmony export */   applyMiddleware: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware),\n/* harmony export */   autoBatchEnhancer: () => (/* binding */ autoBatchEnhancer),\n/* harmony export */   bindActionCreators: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.bindActionCreators),\n/* harmony export */   clearAllListeners: () => (/* binding */ clearAllListeners),\n/* harmony export */   combineReducers: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers),\n/* harmony export */   compose: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.compose),\n/* harmony export */   configureStore: () => (/* binding */ configureStore),\n/* harmony export */   createAction: () => (/* binding */ createAction),\n/* harmony export */   createActionCreatorInvariantMiddleware: () => (/* binding */ createActionCreatorInvariantMiddleware),\n/* harmony export */   createAsyncThunk: () => (/* binding */ createAsyncThunk),\n/* harmony export */   createDraftSafeSelector: () => (/* binding */ createDraftSafeSelector),\n/* harmony export */   createEntityAdapter: () => (/* binding */ createEntityAdapter),\n/* harmony export */   createImmutableStateInvariantMiddleware: () => (/* binding */ createImmutableStateInvariantMiddleware),\n/* harmony export */   createListenerMiddleware: () => (/* binding */ createListenerMiddleware),\n/* harmony export */   createNextState: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   createReducer: () => (/* binding */ createReducer),\n/* harmony export */   createSelector: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector),\n/* harmony export */   createSerializableStateInvariantMiddleware: () => (/* binding */ createSerializableStateInvariantMiddleware),\n/* harmony export */   createSlice: () => (/* binding */ createSlice),\n/* harmony export */   createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.createStore),\n/* harmony export */   current: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.current),\n/* harmony export */   findNonSerializableValue: () => (/* binding */ findNonSerializableValue),\n/* harmony export */   freeze: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.freeze),\n/* harmony export */   getDefaultMiddleware: () => (/* binding */ getDefaultMiddleware),\n/* harmony export */   getType: () => (/* binding */ getType),\n/* harmony export */   isAction: () => (/* binding */ isAction),\n/* harmony export */   isActionCreator: () => (/* binding */ isActionCreator),\n/* harmony export */   isAllOf: () => (/* binding */ isAllOf),\n/* harmony export */   isAnyOf: () => (/* binding */ isAnyOf),\n/* harmony export */   isAsyncThunkAction: () => (/* binding */ isAsyncThunkAction),\n/* harmony export */   isDraft: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.isDraft),\n/* harmony export */   isFluxStandardAction: () => (/* binding */ isFSA),\n/* harmony export */   isFulfilled: () => (/* binding */ isFulfilled),\n/* harmony export */   isImmutableDefault: () => (/* binding */ isImmutableDefault),\n/* harmony export */   isPending: () => (/* binding */ isPending),\n/* harmony export */   isPlain: () => (/* binding */ isPlain),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRejected: () => (/* binding */ isRejected),\n/* harmony export */   isRejectedWithValue: () => (/* binding */ isRejectedWithValue),\n/* harmony export */   legacy_createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.legacy_createStore),\n/* harmony export */   miniSerializeError: () => (/* binding */ miniSerializeError),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   original: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.original),\n/* harmony export */   prepareAutoBatched: () => (/* binding */ prepareAutoBatched),\n/* harmony export */   removeListener: () => (/* binding */ removeListener),\n/* harmony export */   unwrapResult: () => (/* binding */ unwrapResult)\n/* harmony export */ });\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.esm.mjs\");\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/es/redux.js\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/es/index.js\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux-thunk */ \"(ssr)/./node_modules/redux-thunk/es/index.js\");\nvar __extends = undefined && undefined.__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __generator = undefined && undefined.__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar __spreadArray = undefined && undefined.__spreadArray || function(to, from) {\n    for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];\n    return to;\n};\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function(obj, key, value) {\n    return key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: value\n    }) : obj[key] = value;\n};\nvar __spreadValues = function(a, b) {\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for(var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++){\n        var prop = _c[_i];\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = function(a, b) {\n    return __defProps(a, __getOwnPropDescs(b));\n};\nvar __async = function(__this, __arguments, generator) {\n    return new Promise(function(resolve, reject) {\n        var fulfilled = function(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = function(value) {\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = function(x) {\n            return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        };\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/index.ts\n\n\n\n\n// src/createDraftSafeSelector.ts\n\n\nvar createDraftSafeSelector = function() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        args[_i] = arguments[_i];\n    }\n    var selector = reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector.apply(void 0, args);\n    var wrappedSelector = function(value) {\n        var rest = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            rest[_i - 1] = arguments[_i];\n        }\n        return selector.apply(void 0, __spreadArray([\n            (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value\n        ], rest));\n    };\n    return wrappedSelector;\n};\n// src/configureStore.ts\n\n// src/devtoolsExtension.ts\n\nvar composeWithDevTools =  false ? 0 : function() {\n    if (arguments.length === 0) return void 0;\n    if (typeof arguments[0] === \"object\") return redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n    return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(null, arguments);\n};\nvar devToolsEnhancer =  false ? 0 : function() {\n    return function(noop2) {\n        return noop2;\n    };\n};\n// src/isPlainObject.ts\nfunction isPlainObject(value) {\n    if (typeof value !== \"object\" || value === null) return false;\n    var proto = Object.getPrototypeOf(value);\n    if (proto === null) return true;\n    var baseProto = proto;\n    while(Object.getPrototypeOf(baseProto) !== null){\n        baseProto = Object.getPrototypeOf(baseProto);\n    }\n    return proto === baseProto;\n}\n// src/getDefaultMiddleware.ts\n\n// src/tsHelpers.ts\nvar hasMatchFunction = function(v) {\n    return v && typeof v.match === \"function\";\n};\n// src/createAction.ts\nfunction createAction(type, prepareAction) {\n    function actionCreator() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        if (prepareAction) {\n            var prepared = prepareAction.apply(void 0, args);\n            if (!prepared) {\n                throw new Error(\"prepareAction did not return an object\");\n            }\n            return __spreadValues(__spreadValues({\n                type: type,\n                payload: prepared.payload\n            }, \"meta\" in prepared && {\n                meta: prepared.meta\n            }), \"error\" in prepared && {\n                error: prepared.error\n            });\n        }\n        return {\n            type: type,\n            payload: args[0]\n        };\n    }\n    actionCreator.toString = function() {\n        return \"\" + type;\n    };\n    actionCreator.type = type;\n    actionCreator.match = function(action) {\n        return action.type === type;\n    };\n    return actionCreator;\n}\nfunction isAction(action) {\n    return isPlainObject(action) && \"type\" in action;\n}\nfunction isActionCreator(action) {\n    return typeof action === \"function\" && \"type\" in action && hasMatchFunction(action);\n}\nfunction isFSA(action) {\n    return isAction(action) && typeof action.type === \"string\" && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key) {\n    return [\n        \"type\",\n        \"payload\",\n        \"error\",\n        \"meta\"\n    ].indexOf(key) > -1;\n}\nfunction getType(actionCreator) {\n    return \"\" + actionCreator;\n}\n// src/actionCreatorInvariantMiddleware.ts\nfunction getMessage(type) {\n    var splitType = type ? (\"\" + type).split(\"/\") : [];\n    var actionName = splitType[splitType.length - 1] || \"actionCreator\";\n    return 'Detected an action creator with type \"' + (type || \"unknown\") + \"\\\" being dispatched. \\nMake sure you're calling the action creator before dispatching, i.e. `dispatch(\" + actionName + \"())` instead of `dispatch(\" + actionName + \")`. This is necessary even if the action has no payload.\";\n}\nfunction createActionCreatorInvariantMiddleware(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    if (false) {}\n    var _c = options.isActionCreator, isActionCreator2 = _c === void 0 ? isActionCreator : _c;\n    return function() {\n        return function(next) {\n            return function(action) {\n                if (isActionCreator2(action)) {\n                    console.warn(getMessage(action.type));\n                }\n                return next(action);\n            };\n        };\n    };\n}\n// src/utils.ts\n\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n    var elapsed = 0;\n    return {\n        measureTime: function(fn) {\n            var started = Date.now();\n            try {\n                return fn();\n            } finally{\n                var finished = Date.now();\n                elapsed += finished - started;\n            }\n        },\n        warnIfExceeded: function() {\n            if (elapsed > maxDelay) {\n                console.warn(fnName + \" took \" + elapsed + \"ms, which is more than the warning threshold of \" + maxDelay + \"ms. \\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\\nIt is disabled in production builds, so you don't need to worry about that.\");\n            }\n        }\n    };\n}\nvar MiddlewareArray = /** @class */ function(_super) {\n    __extends(MiddlewareArray, _super);\n    function MiddlewareArray() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        var _this = _super.apply(this, args) || this;\n        Object.setPrototypeOf(_this, MiddlewareArray.prototype);\n        return _this;\n    }\n    Object.defineProperty(MiddlewareArray, Symbol.species, {\n        get: function() {\n            return MiddlewareArray;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MiddlewareArray.prototype.concat = function() {\n        var arr = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            arr[_i] = arguments[_i];\n        }\n        return _super.prototype.concat.apply(this, arr);\n    };\n    MiddlewareArray.prototype.prepend = function() {\n        var arr = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            arr[_i] = arguments[_i];\n        }\n        if (arr.length === 1 && Array.isArray(arr[0])) {\n            return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([\n                void 0\n            ], arr[0].concat(this))))();\n        }\n        return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([\n            void 0\n        ], arr.concat(this))))();\n    };\n    return MiddlewareArray;\n}(Array);\nvar EnhancerArray = /** @class */ function(_super) {\n    __extends(EnhancerArray, _super);\n    function EnhancerArray() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        var _this = _super.apply(this, args) || this;\n        Object.setPrototypeOf(_this, EnhancerArray.prototype);\n        return _this;\n    }\n    Object.defineProperty(EnhancerArray, Symbol.species, {\n        get: function() {\n            return EnhancerArray;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    EnhancerArray.prototype.concat = function() {\n        var arr = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            arr[_i] = arguments[_i];\n        }\n        return _super.prototype.concat.apply(this, arr);\n    };\n    EnhancerArray.prototype.prepend = function() {\n        var arr = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            arr[_i] = arguments[_i];\n        }\n        if (arr.length === 1 && Array.isArray(arr[0])) {\n            return new (EnhancerArray.bind.apply(EnhancerArray, __spreadArray([\n                void 0\n            ], arr[0].concat(this))))();\n        }\n        return new (EnhancerArray.bind.apply(EnhancerArray, __spreadArray([\n            void 0\n        ], arr.concat(this))))();\n    };\n    return EnhancerArray;\n}(Array);\nfunction freezeDraftable(val) {\n    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(val) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(val, function() {}) : val;\n}\n// src/immutableStateInvariantMiddleware.ts\nvar isProduction = \"development\" === \"production\";\nvar prefix = \"Invariant failed\";\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    throw new Error(prefix + \": \" + (message || \"\"));\n}\nfunction stringify(obj, serializer, indent, decycler) {\n    return JSON.stringify(obj, getSerialize(serializer, decycler), indent);\n}\nfunction getSerialize(serializer, decycler) {\n    var stack = [], keys = [];\n    if (!decycler) decycler = function(_, value) {\n        if (stack[0] === value) return \"[Circular ~]\";\n        return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n    };\n    return function(key, value) {\n        if (stack.length > 0) {\n            var thisPos = stack.indexOf(this);\n            ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n            ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n            if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n        } else stack.push(value);\n        return serializer == null ? value : serializer.call(this, key, value);\n    };\n}\nfunction isImmutableDefault(value) {\n    return typeof value !== \"object\" || value == null || Object.isFrozen(value);\n}\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n    var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n    return {\n        detectMutations: function() {\n            return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n        }\n    };\n}\nfunction trackProperties(isImmutable, ignorePaths, obj, path, checkedObjects) {\n    if (ignorePaths === void 0) {\n        ignorePaths = [];\n    }\n    if (path === void 0) {\n        path = \"\";\n    }\n    if (checkedObjects === void 0) {\n        checkedObjects = new Set();\n    }\n    var tracked = {\n        value: obj\n    };\n    if (!isImmutable(obj) && !checkedObjects.has(obj)) {\n        checkedObjects.add(obj);\n        tracked.children = {};\n        for(var key in obj){\n            var childPath = path ? path + \".\" + key : key;\n            if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n                continue;\n            }\n            tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n        }\n    }\n    return tracked;\n}\nfunction detectMutations(isImmutable, ignoredPaths, trackedProperty, obj, sameParentRef, path) {\n    if (ignoredPaths === void 0) {\n        ignoredPaths = [];\n    }\n    if (sameParentRef === void 0) {\n        sameParentRef = false;\n    }\n    if (path === void 0) {\n        path = \"\";\n    }\n    var prevObj = trackedProperty ? trackedProperty.value : void 0;\n    var sameRef = prevObj === obj;\n    if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n        return {\n            wasMutated: true,\n            path: path\n        };\n    }\n    if (isImmutable(prevObj) || isImmutable(obj)) {\n        return {\n            wasMutated: false\n        };\n    }\n    var keysToDetect = {};\n    for(var key in trackedProperty.children){\n        keysToDetect[key] = true;\n    }\n    for(var key in obj){\n        keysToDetect[key] = true;\n    }\n    var hasIgnoredPaths = ignoredPaths.length > 0;\n    var _loop_1 = function(key) {\n        var nestedPath = path ? path + \".\" + key : key;\n        if (hasIgnoredPaths) {\n            var hasMatches = ignoredPaths.some(function(ignored) {\n                if (ignored instanceof RegExp) {\n                    return ignored.test(nestedPath);\n                }\n                return nestedPath === ignored;\n            });\n            if (hasMatches) {\n                return \"continue\";\n            }\n        }\n        var result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\n        if (result.wasMutated) {\n            return {\n                value: result\n            };\n        }\n    };\n    for(var key in keysToDetect){\n        var state_1 = _loop_1(key);\n        if (typeof state_1 === \"object\") return state_1.value;\n    }\n    return {\n        wasMutated: false\n    };\n}\nfunction createImmutableStateInvariantMiddleware(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    if (false) {}\n    var _c = options.isImmutable, isImmutable = _c === void 0 ? isImmutableDefault : _c, ignoredPaths = options.ignoredPaths, _d = options.warnAfter, warnAfter = _d === void 0 ? 32 : _d, ignore = options.ignore;\n    ignoredPaths = ignoredPaths || ignore;\n    var track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n    return function(_c) {\n        var getState = _c.getState;\n        var state = getState();\n        var tracker = track(state);\n        var result;\n        return function(next) {\n            return function(action) {\n                var measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\n                measureUtils.measureTime(function() {\n                    state = getState();\n                    result = tracker.detectMutations();\n                    tracker = track(state);\n                    invariant(!result.wasMutated, \"A state mutation was detected between dispatches, in the path '\" + (result.path || \"\") + \"'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\");\n                });\n                var dispatchedAction = next(action);\n                measureUtils.measureTime(function() {\n                    state = getState();\n                    result = tracker.detectMutations();\n                    tracker = track(state);\n                    result.wasMutated && invariant(!result.wasMutated, \"A state mutation was detected inside a dispatch, in the path: \" + (result.path || \"\") + \". Take a look at the reducer(s) handling the action \" + stringify(action) + \". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\");\n                });\n                measureUtils.warnIfExceeded();\n                return dispatchedAction;\n            };\n        };\n    };\n}\n// src/serializableStateInvariantMiddleware.ts\nfunction isPlain(val) {\n    var type = typeof val;\n    return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || isPlainObject(val);\n}\nfunction findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths, cache) {\n    if (path === void 0) {\n        path = \"\";\n    }\n    if (isSerializable === void 0) {\n        isSerializable = isPlain;\n    }\n    if (ignoredPaths === void 0) {\n        ignoredPaths = [];\n    }\n    var foundNestedSerializable;\n    if (!isSerializable(value)) {\n        return {\n            keyPath: path || \"<root>\",\n            value: value\n        };\n    }\n    if (typeof value !== \"object\" || value === null) {\n        return false;\n    }\n    if (cache == null ? void 0 : cache.has(value)) return false;\n    var entries = getEntries != null ? getEntries(value) : Object.entries(value);\n    var hasIgnoredPaths = ignoredPaths.length > 0;\n    var _loop_2 = function(key, nestedValue) {\n        var nestedPath = path ? path + \".\" + key : key;\n        if (hasIgnoredPaths) {\n            var hasMatches = ignoredPaths.some(function(ignored) {\n                if (ignored instanceof RegExp) {\n                    return ignored.test(nestedPath);\n                }\n                return nestedPath === ignored;\n            });\n            if (hasMatches) {\n                return \"continue\";\n            }\n        }\n        if (!isSerializable(nestedValue)) {\n            return {\n                value: {\n                    keyPath: nestedPath,\n                    value: nestedValue\n                }\n            };\n        }\n        if (typeof nestedValue === \"object\") {\n            foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\n            if (foundNestedSerializable) {\n                return {\n                    value: foundNestedSerializable\n                };\n            }\n        }\n    };\n    for(var _i = 0, entries_1 = entries; _i < entries_1.length; _i++){\n        var _c = entries_1[_i], key = _c[0], nestedValue = _c[1];\n        var state_2 = _loop_2(key, nestedValue);\n        if (typeof state_2 === \"object\") return state_2.value;\n    }\n    if (cache && isNestedFrozen(value)) cache.add(value);\n    return false;\n}\nfunction isNestedFrozen(value) {\n    if (!Object.isFrozen(value)) return false;\n    for(var _i = 0, _c = Object.values(value); _i < _c.length; _i++){\n        var nestedValue = _c[_i];\n        if (typeof nestedValue !== \"object\" || nestedValue === null) continue;\n        if (!isNestedFrozen(nestedValue)) return false;\n    }\n    return true;\n}\nfunction createSerializableStateInvariantMiddleware(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    if (false) {}\n    var _c = options.isSerializable, isSerializable = _c === void 0 ? isPlain : _c, getEntries = options.getEntries, _d = options.ignoredActions, ignoredActions = _d === void 0 ? [] : _d, _e = options.ignoredActionPaths, ignoredActionPaths = _e === void 0 ? [\n        \"meta.arg\",\n        \"meta.baseQueryMeta\"\n    ] : _e, _f = options.ignoredPaths, ignoredPaths = _f === void 0 ? [] : _f, _g = options.warnAfter, warnAfter = _g === void 0 ? 32 : _g, _h = options.ignoreState, ignoreState = _h === void 0 ? false : _h, _j = options.ignoreActions, ignoreActions = _j === void 0 ? false : _j, _k = options.disableCache, disableCache = _k === void 0 ? false : _k;\n    var cache = !disableCache && WeakSet ? new WeakSet() : void 0;\n    return function(storeAPI) {\n        return function(next) {\n            return function(action) {\n                var result = next(action);\n                var measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\n                if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\n                    measureUtils.measureTime(function() {\n                        var foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\n                        if (foundActionNonSerializableValue) {\n                            var keyPath = foundActionNonSerializableValue.keyPath, value = foundActionNonSerializableValue.value;\n                            console.error(\"A non-serializable value was detected in an action, in the path: `\" + keyPath + \"`. Value:\", value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\n                        }\n                    });\n                }\n                if (!ignoreState) {\n                    measureUtils.measureTime(function() {\n                        var state = storeAPI.getState();\n                        var foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\n                        if (foundStateNonSerializableValue) {\n                            var keyPath = foundStateNonSerializableValue.keyPath, value = foundStateNonSerializableValue.value;\n                            console.error(\"A non-serializable value was detected in the state, in the path: `\" + keyPath + \"`. Value:\", value, \"\\nTake a look at the reducer(s) handling this action type: \" + action.type + \".\\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)\");\n                        }\n                    });\n                    measureUtils.warnIfExceeded();\n                }\n                return result;\n            };\n        };\n    };\n}\n// src/getDefaultMiddleware.ts\nfunction isBoolean(x) {\n    return typeof x === \"boolean\";\n}\nfunction curryGetDefaultMiddleware() {\n    return function curriedGetDefaultMiddleware(options) {\n        return getDefaultMiddleware(options);\n    };\n}\nfunction getDefaultMiddleware(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var _c = options.thunk, thunk = _c === void 0 ? true : _c, _d = options.immutableCheck, immutableCheck = _d === void 0 ? true : _d, _e = options.serializableCheck, serializableCheck = _e === void 0 ? true : _e, _f = options.actionCreatorCheck, actionCreatorCheck = _f === void 0 ? true : _f;\n    var middlewareArray = new MiddlewareArray();\n    if (thunk) {\n        if (isBoolean(thunk)) {\n            middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n        } else {\n            middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__[\"default\"].withExtraArgument(thunk.extraArgument));\n        }\n    }\n    if (true) {\n        if (immutableCheck) {\n            var immutableOptions = {};\n            if (!isBoolean(immutableCheck)) {\n                immutableOptions = immutableCheck;\n            }\n            middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n        }\n        if (serializableCheck) {\n            var serializableOptions = {};\n            if (!isBoolean(serializableCheck)) {\n                serializableOptions = serializableCheck;\n            }\n            middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n        }\n        if (actionCreatorCheck) {\n            var actionCreatorOptions = {};\n            if (!isBoolean(actionCreatorCheck)) {\n                actionCreatorOptions = actionCreatorCheck;\n            }\n            middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\n        }\n    }\n    return middlewareArray;\n}\n// src/configureStore.ts\nvar IS_PRODUCTION = \"development\" === \"production\";\nfunction configureStore(options) {\n    var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();\n    var _c = options || {}, _d = _c.reducer, reducer = _d === void 0 ? void 0 : _d, _e = _c.middleware, middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e, _f = _c.devTools, devTools = _f === void 0 ? true : _f, _g = _c.preloadedState, preloadedState = _g === void 0 ? void 0 : _g, _h = _c.enhancers, enhancers = _h === void 0 ? void 0 : _h;\n    var rootReducer;\n    if (typeof reducer === \"function\") {\n        rootReducer = reducer;\n    } else if (isPlainObject(reducer)) {\n        rootReducer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducer);\n    } else {\n        throw new Error('\"reducer\" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');\n    }\n    var finalMiddleware = middleware;\n    if (typeof finalMiddleware === \"function\") {\n        finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);\n        if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {\n            throw new Error(\"when using a middleware builder function, an array of middleware must be returned\");\n        }\n    }\n    if (!IS_PRODUCTION && finalMiddleware.some(function(item) {\n        return typeof item !== \"function\";\n    })) {\n        throw new Error(\"each middleware provided to configureStore must be a function\");\n    }\n    var middlewareEnhancer = redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware.apply(void 0, finalMiddleware);\n    var finalCompose = redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n    if (devTools) {\n        finalCompose = composeWithDevTools(__spreadValues({\n            trace: !IS_PRODUCTION\n        }, typeof devTools === \"object\" && devTools));\n    }\n    var defaultEnhancers = new EnhancerArray(middlewareEnhancer);\n    var storeEnhancers = defaultEnhancers;\n    if (Array.isArray(enhancers)) {\n        storeEnhancers = __spreadArray([\n            middlewareEnhancer\n        ], enhancers);\n    } else if (typeof enhancers === \"function\") {\n        storeEnhancers = enhancers(defaultEnhancers);\n    }\n    var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);\n    return (0,redux__WEBPACK_IMPORTED_MODULE_0__.createStore)(rootReducer, preloadedState, composedEnhancer);\n}\n// src/createReducer.ts\n\n// src/mapBuilders.ts\nfunction executeReducerBuilderCallback(builderCallback) {\n    var actionsMap = {};\n    var actionMatchers = [];\n    var defaultCaseReducer;\n    var builder = {\n        addCase: function(typeOrActionCreator, reducer) {\n            if (true) {\n                if (actionMatchers.length > 0) {\n                    throw new Error(\"`builder.addCase` should only be called before calling `builder.addMatcher`\");\n                }\n                if (defaultCaseReducer) {\n                    throw new Error(\"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\n                }\n            }\n            var type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n            if (!type) {\n                throw new Error(\"`builder.addCase` cannot be called with an empty action type\");\n            }\n            if (type in actionsMap) {\n                throw new Error(\"`builder.addCase` cannot be called with two reducers for the same action type\");\n            }\n            actionsMap[type] = reducer;\n            return builder;\n        },\n        addMatcher: function(matcher, reducer) {\n            if (true) {\n                if (defaultCaseReducer) {\n                    throw new Error(\"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\n                }\n            }\n            actionMatchers.push({\n                matcher: matcher,\n                reducer: reducer\n            });\n            return builder;\n        },\n        addDefaultCase: function(reducer) {\n            if (true) {\n                if (defaultCaseReducer) {\n                    throw new Error(\"`builder.addDefaultCase` can only be called once\");\n                }\n            }\n            defaultCaseReducer = reducer;\n            return builder;\n        }\n    };\n    builderCallback(builder);\n    return [\n        actionsMap,\n        actionMatchers,\n        defaultCaseReducer\n    ];\n}\n// src/createReducer.ts\nfunction isStateFunction(x) {\n    return typeof x === \"function\";\n}\nvar hasWarnedAboutObjectNotation = false;\nfunction createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {\n    if (actionMatchers === void 0) {\n        actionMatchers = [];\n    }\n    if (true) {\n        if (typeof mapOrBuilderCallback === \"object\") {\n            if (!hasWarnedAboutObjectNotation) {\n                hasWarnedAboutObjectNotation = true;\n                console.warn(\"The object notation for `createReducer` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\n            }\n        }\n    }\n    var _c = typeof mapOrBuilderCallback === \"function\" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [\n        mapOrBuilderCallback,\n        actionMatchers,\n        defaultCaseReducer\n    ], actionsMap = _c[0], finalActionMatchers = _c[1], finalDefaultCaseReducer = _c[2];\n    var getInitialState;\n    if (isStateFunction(initialState)) {\n        getInitialState = function() {\n            return freezeDraftable(initialState());\n        };\n    } else {\n        var frozenInitialState_1 = freezeDraftable(initialState);\n        getInitialState = function() {\n            return frozenInitialState_1;\n        };\n    }\n    function reducer(state, action) {\n        if (state === void 0) {\n            state = getInitialState();\n        }\n        var caseReducers = __spreadArray([\n            actionsMap[action.type]\n        ], finalActionMatchers.filter(function(_c) {\n            var matcher = _c.matcher;\n            return matcher(action);\n        }).map(function(_c) {\n            var reducer2 = _c.reducer;\n            return reducer2;\n        }));\n        if (caseReducers.filter(function(cr) {\n            return !!cr;\n        }).length === 0) {\n            caseReducers = [\n                finalDefaultCaseReducer\n            ];\n        }\n        return caseReducers.reduce(function(previousState, caseReducer) {\n            if (caseReducer) {\n                if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(previousState)) {\n                    var draft = previousState;\n                    var result = caseReducer(draft, action);\n                    if (result === void 0) {\n                        return previousState;\n                    }\n                    return result;\n                } else if (!(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(previousState)) {\n                    var result = caseReducer(previousState, action);\n                    if (result === void 0) {\n                        if (previousState === null) {\n                            return previousState;\n                        }\n                        throw Error(\"A case reducer on a non-draftable value must not return undefined\");\n                    }\n                    return result;\n                } else {\n                    return (0,immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(previousState, function(draft) {\n                        return caseReducer(draft, action);\n                    });\n                }\n            }\n            return previousState;\n        }, state);\n    }\n    reducer.getInitialState = getInitialState;\n    return reducer;\n}\n// src/createSlice.ts\nvar hasWarnedAboutObjectNotation2 = false;\nfunction getType2(slice, actionKey) {\n    return slice + \"/\" + actionKey;\n}\nfunction createSlice(options) {\n    var name = options.name;\n    if (!name) {\n        throw new Error(\"`name` is a required option for createSlice\");\n    }\n    if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n        if (options.initialState === void 0) {\n            console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\n        }\n    }\n    var initialState = typeof options.initialState == \"function\" ? options.initialState : freezeDraftable(options.initialState);\n    var reducers = options.reducers || {};\n    var reducerNames = Object.keys(reducers);\n    var sliceCaseReducersByName = {};\n    var sliceCaseReducersByType = {};\n    var actionCreators = {};\n    reducerNames.forEach(function(reducerName) {\n        var maybeReducerWithPrepare = reducers[reducerName];\n        var type = getType2(name, reducerName);\n        var caseReducer;\n        var prepareCallback;\n        if (\"reducer\" in maybeReducerWithPrepare) {\n            caseReducer = maybeReducerWithPrepare.reducer;\n            prepareCallback = maybeReducerWithPrepare.prepare;\n        } else {\n            caseReducer = maybeReducerWithPrepare;\n        }\n        sliceCaseReducersByName[reducerName] = caseReducer;\n        sliceCaseReducersByType[type] = caseReducer;\n        actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);\n    });\n    function buildReducer() {\n        if (true) {\n            if (typeof options.extraReducers === \"object\") {\n                if (!hasWarnedAboutObjectNotation2) {\n                    hasWarnedAboutObjectNotation2 = true;\n                    console.warn(\"The object notation for `createSlice.extraReducers` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\n                }\n            }\n        }\n        var _c = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [\n            options.extraReducers\n        ], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e = _c[1], actionMatchers = _e === void 0 ? [] : _e, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;\n        var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);\n        return createReducer(initialState, function(builder) {\n            for(var key in finalCaseReducers){\n                builder.addCase(key, finalCaseReducers[key]);\n            }\n            for(var _i = 0, actionMatchers_1 = actionMatchers; _i < actionMatchers_1.length; _i++){\n                var m = actionMatchers_1[_i];\n                builder.addMatcher(m.matcher, m.reducer);\n            }\n            if (defaultCaseReducer) {\n                builder.addDefaultCase(defaultCaseReducer);\n            }\n        });\n    }\n    var _reducer;\n    return {\n        name: name,\n        reducer: function(state, action) {\n            if (!_reducer) _reducer = buildReducer();\n            return _reducer(state, action);\n        },\n        actions: actionCreators,\n        caseReducers: sliceCaseReducersByName,\n        getInitialState: function() {\n            if (!_reducer) _reducer = buildReducer();\n            return _reducer.getInitialState();\n        }\n    };\n}\n// src/entities/entity_state.ts\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {}\n    };\n}\nfunction createInitialStateFactory() {\n    function getInitialState(additionalState) {\n        if (additionalState === void 0) {\n            additionalState = {};\n        }\n        return Object.assign(getInitialEntityState(), additionalState);\n    }\n    return {\n        getInitialState: getInitialState\n    };\n}\n// src/entities/state_selectors.ts\nfunction createSelectorsFactory() {\n    function getSelectors(selectState) {\n        var selectIds = function(state) {\n            return state.ids;\n        };\n        var selectEntities = function(state) {\n            return state.entities;\n        };\n        var selectAll = createDraftSafeSelector(selectIds, selectEntities, function(ids, entities) {\n            return ids.map(function(id) {\n                return entities[id];\n            });\n        });\n        var selectId = function(_, id) {\n            return id;\n        };\n        var selectById = function(entities, id) {\n            return entities[id];\n        };\n        var selectTotal = createDraftSafeSelector(selectIds, function(ids) {\n            return ids.length;\n        });\n        if (!selectState) {\n            return {\n                selectIds: selectIds,\n                selectEntities: selectEntities,\n                selectAll: selectAll,\n                selectTotal: selectTotal,\n                selectById: createDraftSafeSelector(selectEntities, selectId, selectById)\n            };\n        }\n        var selectGlobalizedEntities = createDraftSafeSelector(selectState, selectEntities);\n        return {\n            selectIds: createDraftSafeSelector(selectState, selectIds),\n            selectEntities: selectGlobalizedEntities,\n            selectAll: createDraftSafeSelector(selectState, selectAll),\n            selectTotal: createDraftSafeSelector(selectState, selectTotal),\n            selectById: createDraftSafeSelector(selectGlobalizedEntities, selectId, selectById)\n        };\n    }\n    return {\n        getSelectors: getSelectors\n    };\n}\n// src/entities/state_adapter.ts\n\nfunction createSingleArgumentStateOperator(mutator) {\n    var operator = createStateOperator(function(_, state) {\n        return mutator(state);\n    });\n    return function operation(state) {\n        return operator(state, void 0);\n    };\n}\nfunction createStateOperator(mutator) {\n    return function operation(state, arg) {\n        function isPayloadActionArgument(arg2) {\n            return isFSA(arg2);\n        }\n        var runMutator = function(draft) {\n            if (isPayloadActionArgument(arg)) {\n                mutator(arg.payload, draft);\n            } else {\n                mutator(arg, draft);\n            }\n        };\n        if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(state)) {\n            runMutator(state);\n            return state;\n        } else {\n            return (0,immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state, runMutator);\n        }\n    };\n}\n// src/entities/utils.ts\nfunction selectIdValue(entity, selectId) {\n    var key = selectId(entity);\n    if ( true && key === void 0) {\n        console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\n    }\n    return key;\n}\nfunction ensureEntitiesArray(entities) {\n    if (!Array.isArray(entities)) {\n        entities = Object.values(entities);\n    }\n    return entities;\n}\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var added = [];\n    var updated = [];\n    for(var _i = 0, newEntities_1 = newEntities; _i < newEntities_1.length; _i++){\n        var entity = newEntities_1[_i];\n        var id = selectIdValue(entity, selectId);\n        if (id in state.entities) {\n            updated.push({\n                id: id,\n                changes: entity\n            });\n        } else {\n            added.push(entity);\n        }\n    }\n    return [\n        added,\n        updated\n    ];\n}\n// src/entities/unsorted_state_adapter.ts\nfunction createUnsortedStateAdapter(selectId) {\n    function addOneMutably(entity, state) {\n        var key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n    }\n    function addManyMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        for(var _i = 0, newEntities_2 = newEntities; _i < newEntities_2.length; _i++){\n            var entity = newEntities_2[_i];\n            addOneMutably(entity, state);\n        }\n    }\n    function setOneMutably(entity, state) {\n        var key = selectIdValue(entity, selectId);\n        if (!(key in state.entities)) {\n            state.ids.push(key);\n        }\n        state.entities[key] = entity;\n    }\n    function setManyMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        for(var _i = 0, newEntities_3 = newEntities; _i < newEntities_3.length; _i++){\n            var entity = newEntities_3[_i];\n            setOneMutably(entity, state);\n        }\n    }\n    function setAllMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(newEntities, state);\n    }\n    function removeOneMutably(key, state) {\n        return removeManyMutably([\n            key\n        ], state);\n    }\n    function removeManyMutably(keys, state) {\n        var didMutate = false;\n        keys.forEach(function(key) {\n            if (key in state.entities) {\n                delete state.entities[key];\n                didMutate = true;\n            }\n        });\n        if (didMutate) {\n            state.ids = state.ids.filter(function(id) {\n                return id in state.entities;\n            });\n        }\n    }\n    function removeAllMutably(state) {\n        Object.assign(state, {\n            ids: [],\n            entities: {}\n        });\n    }\n    function takeNewKey(keys, update, state) {\n        var original2 = state.entities[update.id];\n        var updated = Object.assign({}, original2, update.changes);\n        var newKey = selectIdValue(updated, selectId);\n        var hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([\n            update\n        ], state);\n    }\n    function updateManyMutably(updates, state) {\n        var newKeys = {};\n        var updatesPerEntity = {};\n        updates.forEach(function(update) {\n            if (update.id in state.entities) {\n                updatesPerEntity[update.id] = {\n                    id: update.id,\n                    changes: __spreadValues(__spreadValues({}, updatesPerEntity[update.id] ? updatesPerEntity[update.id].changes : null), update.changes)\n                };\n            }\n        });\n        updates = Object.values(updatesPerEntity);\n        var didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            var didMutateIds = updates.filter(function(update) {\n                return takeNewKey(newKeys, update, state);\n            }).length > 0;\n            if (didMutateIds) {\n                state.ids = Object.keys(state.entities);\n            }\n        }\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([\n            entity\n        ], state);\n    }\n    function upsertManyMutably(newEntities, state) {\n        var _c = splitAddedUpdatedEntities(newEntities, selectId, state), added = _c[0], updated = _c[1];\n        updateManyMutably(updated, state);\n        addManyMutably(added, state);\n    }\n    return {\n        removeAll: createSingleArgumentStateOperator(removeAllMutably),\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        setOne: createStateOperator(setOneMutably),\n        setMany: createStateOperator(setManyMutably),\n        setAll: createStateOperator(setAllMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably)\n    };\n}\n// src/entities/sorted_state_adapter.ts\nfunction createSortedStateAdapter(selectId, sort) {\n    var _c = createUnsortedStateAdapter(selectId), removeOne = _c.removeOne, removeMany = _c.removeMany, removeAll = _c.removeAll;\n    function addOneMutably(entity, state) {\n        return addManyMutably([\n            entity\n        ], state);\n    }\n    function addManyMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        var models = newEntities.filter(function(model) {\n            return !(selectIdValue(model, selectId) in state.entities);\n        });\n        if (models.length !== 0) {\n            merge(models, state);\n        }\n    }\n    function setOneMutably(entity, state) {\n        return setManyMutably([\n            entity\n        ], state);\n    }\n    function setManyMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        if (newEntities.length !== 0) {\n            merge(newEntities, state);\n        }\n    }\n    function setAllMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(newEntities, state);\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([\n            update\n        ], state);\n    }\n    function updateManyMutably(updates, state) {\n        var appliedUpdates = false;\n        for(var _i = 0, updates_1 = updates; _i < updates_1.length; _i++){\n            var update = updates_1[_i];\n            var entity = state.entities[update.id];\n            if (!entity) {\n                continue;\n            }\n            appliedUpdates = true;\n            Object.assign(entity, update.changes);\n            var newId = selectId(entity);\n            if (update.id !== newId) {\n                delete state.entities[update.id];\n                state.entities[newId] = entity;\n            }\n        }\n        if (appliedUpdates) {\n            resortEntities(state);\n        }\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([\n            entity\n        ], state);\n    }\n    function upsertManyMutably(newEntities, state) {\n        var _c = splitAddedUpdatedEntities(newEntities, selectId, state), added = _c[0], updated = _c[1];\n        updateManyMutably(updated, state);\n        addManyMutably(added, state);\n    }\n    function areArraysEqual(a, b) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for(var i = 0; i < a.length && i < b.length; i++){\n            if (a[i] === b[i]) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n    function merge(models, state) {\n        models.forEach(function(model) {\n            state.entities[selectId(model)] = model;\n        });\n        resortEntities(state);\n    }\n    function resortEntities(state) {\n        var allEntities = Object.values(state.entities);\n        allEntities.sort(sort);\n        var newSortedIds = allEntities.map(selectId);\n        var ids = state.ids;\n        if (!areArraysEqual(ids, newSortedIds)) {\n            state.ids = newSortedIds;\n        }\n    }\n    return {\n        removeOne: removeOne,\n        removeMany: removeMany,\n        removeAll: removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        setOne: createStateOperator(setOneMutably),\n        setMany: createStateOperator(setManyMutably),\n        setAll: createStateOperator(setAllMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably)\n    };\n}\n// src/entities/create_adapter.ts\nfunction createEntityAdapter(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var _c = __spreadValues({\n        sortComparer: false,\n        selectId: function(instance) {\n            return instance.id;\n        }\n    }, options), selectId = _c.selectId, sortComparer = _c.sortComparer;\n    var stateFactory = createInitialStateFactory();\n    var selectorsFactory = createSelectorsFactory();\n    var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n    return __spreadValues(__spreadValues(__spreadValues({\n        selectId: selectId,\n        sortComparer: sortComparer\n    }, stateFactory), selectorsFactory), stateAdapter);\n}\n// src/nanoid.ts\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\nvar nanoid = function(size) {\n    if (size === void 0) {\n        size = 21;\n    }\n    var id = \"\";\n    var i = size;\n    while(i--){\n        id += urlAlphabet[Math.random() * 64 | 0];\n    }\n    return id;\n};\n// src/createAsyncThunk.ts\nvar commonProperties = [\n    \"name\",\n    \"message\",\n    \"stack\",\n    \"code\"\n];\nvar RejectWithValue = /** @class */ function() {\n    function RejectWithValue(payload, meta) {\n        this.payload = payload;\n        this.meta = meta;\n    }\n    return RejectWithValue;\n}();\nvar FulfillWithMeta = /** @class */ function() {\n    function FulfillWithMeta(payload, meta) {\n        this.payload = payload;\n        this.meta = meta;\n    }\n    return FulfillWithMeta;\n}();\nvar miniSerializeError = function(value) {\n    if (typeof value === \"object\" && value !== null) {\n        var simpleError = {};\n        for(var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++){\n            var property = commonProperties_1[_i];\n            if (typeof value[property] === \"string\") {\n                simpleError[property] = value[property];\n            }\n        }\n        return simpleError;\n    }\n    return {\n        message: String(value)\n    };\n};\nvar createAsyncThunk = function() {\n    function createAsyncThunk2(typePrefix, payloadCreator, options) {\n        var fulfilled = createAction(typePrefix + \"/fulfilled\", function(payload, requestId, arg, meta) {\n            return {\n                payload: payload,\n                meta: __spreadProps(__spreadValues({}, meta || {}), {\n                    arg: arg,\n                    requestId: requestId,\n                    requestStatus: \"fulfilled\"\n                })\n            };\n        });\n        var pending = createAction(typePrefix + \"/pending\", function(requestId, arg, meta) {\n            return {\n                payload: void 0,\n                meta: __spreadProps(__spreadValues({}, meta || {}), {\n                    arg: arg,\n                    requestId: requestId,\n                    requestStatus: \"pending\"\n                })\n            };\n        });\n        var rejected = createAction(typePrefix + \"/rejected\", function(error, requestId, arg, payload, meta) {\n            return {\n                payload: payload,\n                error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\n                meta: __spreadProps(__spreadValues({}, meta || {}), {\n                    arg: arg,\n                    requestId: requestId,\n                    rejectedWithValue: !!payload,\n                    requestStatus: \"rejected\",\n                    aborted: (error == null ? void 0 : error.name) === \"AbortError\",\n                    condition: (error == null ? void 0 : error.name) === \"ConditionError\"\n                })\n            };\n        });\n        var displayedWarning = false;\n        var AC = typeof AbortController !== \"undefined\" ? AbortController : /** @class */ function() {\n            function class_1() {\n                this.signal = {\n                    aborted: false,\n                    addEventListener: function() {},\n                    dispatchEvent: function() {\n                        return false;\n                    },\n                    onabort: function() {},\n                    removeEventListener: function() {},\n                    reason: void 0,\n                    throwIfAborted: function() {}\n                };\n            }\n            class_1.prototype.abort = function() {\n                if (true) {\n                    if (!displayedWarning) {\n                        displayedWarning = true;\n                        console.info(\"This platform does not implement AbortController. \\nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.\");\n                    }\n                }\n            };\n            return class_1;\n        }();\n        function actionCreator(arg) {\n            return function(dispatch, getState, extra) {\n                var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();\n                var abortController = new AC();\n                var abortReason;\n                var started = false;\n                function abort(reason) {\n                    abortReason = reason;\n                    abortController.abort();\n                }\n                var promise2 = function() {\n                    return __async(this, null, function() {\n                        var _a, _b, finalAction, conditionResult, abortedPromise, err_1, skipDispatch;\n                        return __generator(this, function(_c) {\n                            switch(_c.label){\n                                case 0:\n                                    _c.trys.push([\n                                        0,\n                                        4,\n                                        ,\n                                        5\n                                    ]);\n                                    conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, {\n                                        getState: getState,\n                                        extra: extra\n                                    });\n                                    if (!isThenable(conditionResult)) return [\n                                        3 /*break*/ ,\n                                        2\n                                    ];\n                                    return [\n                                        4 /*yield*/ ,\n                                        conditionResult\n                                    ];\n                                case 1:\n                                    conditionResult = _c.sent();\n                                    _c.label = 2;\n                                case 2:\n                                    if (conditionResult === false || abortController.signal.aborted) {\n                                        throw {\n                                            name: \"ConditionError\",\n                                            message: \"Aborted due to condition callback returning false.\"\n                                        };\n                                    }\n                                    started = true;\n                                    abortedPromise = new Promise(function(_, reject) {\n                                        return abortController.signal.addEventListener(\"abort\", function() {\n                                            return reject({\n                                                name: \"AbortError\",\n                                                message: abortReason || \"Aborted\"\n                                            });\n                                        });\n                                    });\n                                    dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, {\n                                        requestId: requestId,\n                                        arg: arg\n                                    }, {\n                                        getState: getState,\n                                        extra: extra\n                                    })));\n                                    return [\n                                        4 /*yield*/ ,\n                                        Promise.race([\n                                            abortedPromise,\n                                            Promise.resolve(payloadCreator(arg, {\n                                                dispatch: dispatch,\n                                                getState: getState,\n                                                extra: extra,\n                                                requestId: requestId,\n                                                signal: abortController.signal,\n                                                abort: abort,\n                                                rejectWithValue: function(value, meta) {\n                                                    return new RejectWithValue(value, meta);\n                                                },\n                                                fulfillWithValue: function(value, meta) {\n                                                    return new FulfillWithMeta(value, meta);\n                                                }\n                                            })).then(function(result) {\n                                                if (result instanceof RejectWithValue) {\n                                                    throw result;\n                                                }\n                                                if (result instanceof FulfillWithMeta) {\n                                                    return fulfilled(result.payload, requestId, arg, result.meta);\n                                                }\n                                                return fulfilled(result, requestId, arg);\n                                            })\n                                        ])\n                                    ];\n                                case 3:\n                                    finalAction = _c.sent();\n                                    return [\n                                        3 /*break*/ ,\n                                        5\n                                    ];\n                                case 4:\n                                    err_1 = _c.sent();\n                                    finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);\n                                    return [\n                                        3 /*break*/ ,\n                                        5\n                                    ];\n                                case 5:\n                                    skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n                                    if (!skipDispatch) {\n                                        dispatch(finalAction);\n                                    }\n                                    return [\n                                        2 /*return*/ ,\n                                        finalAction\n                                    ];\n                            }\n                        });\n                    });\n                }();\n                return Object.assign(promise2, {\n                    abort: abort,\n                    requestId: requestId,\n                    arg: arg,\n                    unwrap: function() {\n                        return promise2.then(unwrapResult);\n                    }\n                });\n            };\n        }\n        return Object.assign(actionCreator, {\n            pending: pending,\n            rejected: rejected,\n            fulfilled: fulfilled,\n            typePrefix: typePrefix\n        });\n    }\n    createAsyncThunk2.withTypes = function() {\n        return createAsyncThunk2;\n    };\n    return createAsyncThunk2;\n}();\nfunction unwrapResult(action) {\n    if (action.meta && action.meta.rejectedWithValue) {\n        throw action.payload;\n    }\n    if (action.error) {\n        throw action.error;\n    }\n    return action.payload;\n}\nfunction isThenable(value) {\n    return value !== null && typeof value === \"object\" && typeof value.then === \"function\";\n}\n// src/matchers.ts\nvar matches = function(matcher, action) {\n    if (hasMatchFunction(matcher)) {\n        return matcher.match(action);\n    } else {\n        return matcher(action);\n    }\n};\nfunction isAnyOf() {\n    var matchers = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        matchers[_i] = arguments[_i];\n    }\n    return function(action) {\n        return matchers.some(function(matcher) {\n            return matches(matcher, action);\n        });\n    };\n}\nfunction isAllOf() {\n    var matchers = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        matchers[_i] = arguments[_i];\n    }\n    return function(action) {\n        return matchers.every(function(matcher) {\n            return matches(matcher, action);\n        });\n    };\n}\nfunction hasExpectedRequestMetadata(action, validStatus) {\n    if (!action || !action.meta) return false;\n    var hasValidRequestId = typeof action.meta.requestId === \"string\";\n    var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n    return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a) {\n    return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\n}\nfunction isPending() {\n    var asyncThunks = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        asyncThunks[_i] = arguments[_i];\n    }\n    if (asyncThunks.length === 0) {\n        return function(action) {\n            return hasExpectedRequestMetadata(action, [\n                \"pending\"\n            ]);\n        };\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isPending()(asyncThunks[0]);\n    }\n    return function(action) {\n        var matchers = asyncThunks.map(function(asyncThunk) {\n            return asyncThunk.pending;\n        });\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\n        return combinedMatcher(action);\n    };\n}\nfunction isRejected() {\n    var asyncThunks = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        asyncThunks[_i] = arguments[_i];\n    }\n    if (asyncThunks.length === 0) {\n        return function(action) {\n            return hasExpectedRequestMetadata(action, [\n                \"rejected\"\n            ]);\n        };\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isRejected()(asyncThunks[0]);\n    }\n    return function(action) {\n        var matchers = asyncThunks.map(function(asyncThunk) {\n            return asyncThunk.rejected;\n        });\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\n        return combinedMatcher(action);\n    };\n}\nfunction isRejectedWithValue() {\n    var asyncThunks = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        asyncThunks[_i] = arguments[_i];\n    }\n    var hasFlag = function(action) {\n        return action && action.meta && action.meta.rejectedWithValue;\n    };\n    if (asyncThunks.length === 0) {\n        return function(action) {\n            var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n            return combinedMatcher(action);\n        };\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isRejectedWithValue()(asyncThunks[0]);\n    }\n    return function(action) {\n        var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n        return combinedMatcher(action);\n    };\n}\nfunction isFulfilled() {\n    var asyncThunks = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        asyncThunks[_i] = arguments[_i];\n    }\n    if (asyncThunks.length === 0) {\n        return function(action) {\n            return hasExpectedRequestMetadata(action, [\n                \"fulfilled\"\n            ]);\n        };\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isFulfilled()(asyncThunks[0]);\n    }\n    return function(action) {\n        var matchers = asyncThunks.map(function(asyncThunk) {\n            return asyncThunk.fulfilled;\n        });\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\n        return combinedMatcher(action);\n    };\n}\nfunction isAsyncThunkAction() {\n    var asyncThunks = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        asyncThunks[_i] = arguments[_i];\n    }\n    if (asyncThunks.length === 0) {\n        return function(action) {\n            return hasExpectedRequestMetadata(action, [\n                \"pending\",\n                \"fulfilled\",\n                \"rejected\"\n            ]);\n        };\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isAsyncThunkAction()(asyncThunks[0]);\n    }\n    return function(action) {\n        var matchers = [];\n        for(var _i = 0, asyncThunks_1 = asyncThunks; _i < asyncThunks_1.length; _i++){\n            var asyncThunk = asyncThunks_1[_i];\n            matchers.push(asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled);\n        }\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\n        return combinedMatcher(action);\n    };\n}\n// src/listenerMiddleware/utils.ts\nvar assertFunction = function(func, expected) {\n    if (typeof func !== \"function\") {\n        throw new TypeError(expected + \" is not a function\");\n    }\n};\nvar noop = function() {};\nvar catchRejection = function(promise2, onError) {\n    if (onError === void 0) {\n        onError = noop;\n    }\n    promise2.catch(onError);\n    return promise2;\n};\nvar addAbortSignalListener = function(abortSignal, callback) {\n    abortSignal.addEventListener(\"abort\", callback, {\n        once: true\n    });\n    return function() {\n        return abortSignal.removeEventListener(\"abort\", callback);\n    };\n};\nvar abortControllerWithReason = function(abortController, reason) {\n    var signal = abortController.signal;\n    if (signal.aborted) {\n        return;\n    }\n    if (!(\"reason\" in signal)) {\n        Object.defineProperty(signal, \"reason\", {\n            enumerable: true,\n            value: reason,\n            configurable: true,\n            writable: true\n        });\n    }\n    ;\n    abortController.abort(reason);\n};\n// src/listenerMiddleware/exceptions.ts\nvar task = \"task\";\nvar listener = \"listener\";\nvar completed = \"completed\";\nvar cancelled = \"cancelled\";\nvar taskCancelled = \"task-\" + cancelled;\nvar taskCompleted = \"task-\" + completed;\nvar listenerCancelled = listener + \"-\" + cancelled;\nvar listenerCompleted = listener + \"-\" + completed;\nvar TaskAbortError = /** @class */ function() {\n    function TaskAbortError(code) {\n        this.code = code;\n        this.name = \"TaskAbortError\";\n        this.message = task + \" \" + cancelled + \" (reason: \" + code + \")\";\n    }\n    return TaskAbortError;\n}();\n// src/listenerMiddleware/task.ts\nvar validateActive = function(signal) {\n    if (signal.aborted) {\n        throw new TaskAbortError(signal.reason);\n    }\n};\nfunction raceWithSignal(signal, promise2) {\n    var cleanup = noop;\n    return new Promise(function(resolve, reject) {\n        var notifyRejection = function() {\n            return reject(new TaskAbortError(signal.reason));\n        };\n        if (signal.aborted) {\n            notifyRejection();\n            return;\n        }\n        cleanup = addAbortSignalListener(signal, notifyRejection);\n        promise2.finally(function() {\n            return cleanup();\n        }).then(resolve, reject);\n    }).finally(function() {\n        cleanup = noop;\n    });\n}\nvar runTask = function(task2, cleanUp) {\n    return __async(void 0, null, function() {\n        var value, error_1;\n        return __generator(this, function(_c) {\n            switch(_c.label){\n                case 0:\n                    _c.trys.push([\n                        0,\n                        3,\n                        4,\n                        5\n                    ]);\n                    return [\n                        4 /*yield*/ ,\n                        Promise.resolve()\n                    ];\n                case 1:\n                    _c.sent();\n                    return [\n                        4 /*yield*/ ,\n                        task2()\n                    ];\n                case 2:\n                    value = _c.sent();\n                    return [\n                        2 /*return*/ ,\n                        {\n                            status: \"ok\",\n                            value: value\n                        }\n                    ];\n                case 3:\n                    error_1 = _c.sent();\n                    return [\n                        2 /*return*/ ,\n                        {\n                            status: error_1 instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\n                            error: error_1\n                        }\n                    ];\n                case 4:\n                    cleanUp == null ? void 0 : cleanUp();\n                    return [\n                        7 /*endfinally*/ \n                    ];\n                case 5:\n                    return [\n                        2 /*return*/ \n                    ];\n            }\n        });\n    });\n};\nvar createPause = function(signal) {\n    return function(promise2) {\n        return catchRejection(raceWithSignal(signal, promise2).then(function(output) {\n            validateActive(signal);\n            return output;\n        }));\n    };\n};\nvar createDelay = function(signal) {\n    var pause = createPause(signal);\n    return function(timeoutMs) {\n        return pause(new Promise(function(resolve) {\n            return setTimeout(resolve, timeoutMs);\n        }));\n    };\n};\n// src/listenerMiddleware/index.ts\nvar assign = Object.assign;\nvar INTERNAL_NIL_TOKEN = {};\nvar alm = \"listenerMiddleware\";\nvar createFork = function(parentAbortSignal, parentBlockingPromises) {\n    var linkControllers = function(controller) {\n        return addAbortSignalListener(parentAbortSignal, function() {\n            return abortControllerWithReason(controller, parentAbortSignal.reason);\n        });\n    };\n    return function(taskExecutor, opts) {\n        assertFunction(taskExecutor, \"taskExecutor\");\n        var childAbortController = new AbortController();\n        linkControllers(childAbortController);\n        var result = runTask(function() {\n            return __async(void 0, null, function() {\n                var result2;\n                return __generator(this, function(_c) {\n                    switch(_c.label){\n                        case 0:\n                            validateActive(parentAbortSignal);\n                            validateActive(childAbortController.signal);\n                            return [\n                                4 /*yield*/ ,\n                                taskExecutor({\n                                    pause: createPause(childAbortController.signal),\n                                    delay: createDelay(childAbortController.signal),\n                                    signal: childAbortController.signal\n                                })\n                            ];\n                        case 1:\n                            result2 = _c.sent();\n                            validateActive(childAbortController.signal);\n                            return [\n                                2 /*return*/ ,\n                                result2\n                            ];\n                    }\n                });\n            });\n        }, function() {\n            return abortControllerWithReason(childAbortController, taskCompleted);\n        });\n        if (opts == null ? void 0 : opts.autoJoin) {\n            parentBlockingPromises.push(result);\n        }\n        return {\n            result: createPause(parentAbortSignal)(result),\n            cancel: function() {\n                abortControllerWithReason(childAbortController, taskCancelled);\n            }\n        };\n    };\n};\nvar createTakePattern = function(startListening, signal) {\n    var take = function(predicate, timeout) {\n        return __async(void 0, null, function() {\n            var unsubscribe, tuplePromise, promises, output;\n            return __generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        validateActive(signal);\n                        unsubscribe = function() {};\n                        tuplePromise = new Promise(function(resolve, reject) {\n                            var stopListening = startListening({\n                                predicate: predicate,\n                                effect: function(action, listenerApi) {\n                                    listenerApi.unsubscribe();\n                                    resolve([\n                                        action,\n                                        listenerApi.getState(),\n                                        listenerApi.getOriginalState()\n                                    ]);\n                                }\n                            });\n                            unsubscribe = function() {\n                                stopListening();\n                                reject();\n                            };\n                        });\n                        promises = [\n                            tuplePromise\n                        ];\n                        if (timeout != null) {\n                            promises.push(new Promise(function(resolve) {\n                                return setTimeout(resolve, timeout, null);\n                            }));\n                        }\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([\n                            1,\n                            ,\n                            3,\n                            4\n                        ]);\n                        return [\n                            4 /*yield*/ ,\n                            raceWithSignal(signal, Promise.race(promises))\n                        ];\n                    case 2:\n                        output = _c.sent();\n                        validateActive(signal);\n                        return [\n                            2 /*return*/ ,\n                            output\n                        ];\n                    case 3:\n                        unsubscribe();\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 4:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    return function(predicate, timeout) {\n        return catchRejection(take(predicate, timeout));\n    };\n};\nvar getListenerEntryPropsFrom = function(options) {\n    var type = options.type, actionCreator = options.actionCreator, matcher = options.matcher, predicate = options.predicate, effect = options.effect;\n    if (type) {\n        predicate = createAction(type).match;\n    } else if (actionCreator) {\n        type = actionCreator.type;\n        predicate = actionCreator.match;\n    } else if (matcher) {\n        predicate = matcher;\n    } else if (predicate) {} else {\n        throw new Error(\"Creating or removing a listener requires one of the known fields for matching an action\");\n    }\n    assertFunction(effect, \"options.listener\");\n    return {\n        predicate: predicate,\n        type: type,\n        effect: effect\n    };\n};\nvar createListenerEntry = function(options) {\n    var _c = getListenerEntryPropsFrom(options), type = _c.type, predicate = _c.predicate, effect = _c.effect;\n    var id = nanoid();\n    var entry = {\n        id: id,\n        effect: effect,\n        type: type,\n        predicate: predicate,\n        pending: new Set(),\n        unsubscribe: function() {\n            throw new Error(\"Unsubscribe not initialized\");\n        }\n    };\n    return entry;\n};\nvar cancelActiveListeners = function(entry) {\n    entry.pending.forEach(function(controller) {\n        abortControllerWithReason(controller, listenerCancelled);\n    });\n};\nvar createClearListenerMiddleware = function(listenerMap) {\n    return function() {\n        listenerMap.forEach(cancelActiveListeners);\n        listenerMap.clear();\n    };\n};\nvar safelyNotifyError = function(errorHandler, errorToNotify, errorInfo) {\n    try {\n        errorHandler(errorToNotify, errorInfo);\n    } catch (errorHandlerError) {\n        setTimeout(function() {\n            throw errorHandlerError;\n        }, 0);\n    }\n};\nvar addListener = createAction(alm + \"/add\");\nvar clearAllListeners = createAction(alm + \"/removeAll\");\nvar removeListener = createAction(alm + \"/remove\");\nvar defaultErrorHandler = function() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        args[_i] = arguments[_i];\n    }\n    console.error.apply(console, __spreadArray([\n        alm + \"/error\"\n    ], args));\n};\nfunction createListenerMiddleware(middlewareOptions) {\n    var _this = this;\n    if (middlewareOptions === void 0) {\n        middlewareOptions = {};\n    }\n    var listenerMap = new Map();\n    var extra = middlewareOptions.extra, _c = middlewareOptions.onError, onError = _c === void 0 ? defaultErrorHandler : _c;\n    assertFunction(onError, \"onError\");\n    var insertEntry = function(entry) {\n        entry.unsubscribe = function() {\n            return listenerMap.delete(entry.id);\n        };\n        listenerMap.set(entry.id, entry);\n        return function(cancelOptions) {\n            entry.unsubscribe();\n            if (cancelOptions == null ? void 0 : cancelOptions.cancelActive) {\n                cancelActiveListeners(entry);\n            }\n        };\n    };\n    var findListenerEntry = function(comparator) {\n        for(var _i = 0, _c = Array.from(listenerMap.values()); _i < _c.length; _i++){\n            var entry = _c[_i];\n            if (comparator(entry)) {\n                return entry;\n            }\n        }\n        return void 0;\n    };\n    var startListening = function(options) {\n        var entry = findListenerEntry(function(existingEntry) {\n            return existingEntry.effect === options.effect;\n        });\n        if (!entry) {\n            entry = createListenerEntry(options);\n        }\n        return insertEntry(entry);\n    };\n    var stopListening = function(options) {\n        var _c = getListenerEntryPropsFrom(options), type = _c.type, effect = _c.effect, predicate = _c.predicate;\n        var entry = findListenerEntry(function(entry2) {\n            var matchPredicateOrType = typeof type === \"string\" ? entry2.type === type : entry2.predicate === predicate;\n            return matchPredicateOrType && entry2.effect === effect;\n        });\n        if (entry) {\n            entry.unsubscribe();\n            if (options.cancelActive) {\n                cancelActiveListeners(entry);\n            }\n        }\n        return !!entry;\n    };\n    var notifyListener = function(entry, action, api, getOriginalState) {\n        return __async(_this, null, function() {\n            var internalTaskController, take, autoJoinPromises, listenerError_1;\n            return __generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        internalTaskController = new AbortController();\n                        take = createTakePattern(startListening, internalTaskController.signal);\n                        autoJoinPromises = [];\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([\n                            1,\n                            3,\n                            4,\n                            6\n                        ]);\n                        entry.pending.add(internalTaskController);\n                        return [\n                            4 /*yield*/ ,\n                            Promise.resolve(entry.effect(action, assign({}, api, {\n                                getOriginalState: getOriginalState,\n                                condition: function(predicate, timeout) {\n                                    return take(predicate, timeout).then(Boolean);\n                                },\n                                take: take,\n                                delay: createDelay(internalTaskController.signal),\n                                pause: createPause(internalTaskController.signal),\n                                extra: extra,\n                                signal: internalTaskController.signal,\n                                fork: createFork(internalTaskController.signal, autoJoinPromises),\n                                unsubscribe: entry.unsubscribe,\n                                subscribe: function() {\n                                    listenerMap.set(entry.id, entry);\n                                },\n                                cancelActiveListeners: function() {\n                                    entry.pending.forEach(function(controller, _, set) {\n                                        if (controller !== internalTaskController) {\n                                            abortControllerWithReason(controller, listenerCancelled);\n                                            set.delete(controller);\n                                        }\n                                    });\n                                }\n                            })))\n                        ];\n                    case 2:\n                        _c.sent();\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 3:\n                        listenerError_1 = _c.sent();\n                        if (!(listenerError_1 instanceof TaskAbortError)) {\n                            safelyNotifyError(onError, listenerError_1, {\n                                raisedBy: \"effect\"\n                            });\n                        }\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 4:\n                        return [\n                            4 /*yield*/ ,\n                            Promise.allSettled(autoJoinPromises)\n                        ];\n                    case 5:\n                        _c.sent();\n                        abortControllerWithReason(internalTaskController, listenerCompleted);\n                        entry.pending.delete(internalTaskController);\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 6:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    var clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n    var middleware = function(api) {\n        return function(next) {\n            return function(action) {\n                if (!isAction(action)) {\n                    return next(action);\n                }\n                if (addListener.match(action)) {\n                    return startListening(action.payload);\n                }\n                if (clearAllListeners.match(action)) {\n                    clearListenerMiddleware();\n                    return;\n                }\n                if (removeListener.match(action)) {\n                    return stopListening(action.payload);\n                }\n                var originalState = api.getState();\n                var getOriginalState = function() {\n                    if (originalState === INTERNAL_NIL_TOKEN) {\n                        throw new Error(alm + \": getOriginalState can only be called synchronously\");\n                    }\n                    return originalState;\n                };\n                var result;\n                try {\n                    result = next(action);\n                    if (listenerMap.size > 0) {\n                        var currentState = api.getState();\n                        var listenerEntries = Array.from(listenerMap.values());\n                        for(var _i = 0, listenerEntries_1 = listenerEntries; _i < listenerEntries_1.length; _i++){\n                            var entry = listenerEntries_1[_i];\n                            var runListener = false;\n                            try {\n                                runListener = entry.predicate(action, currentState, originalState);\n                            } catch (predicateError) {\n                                runListener = false;\n                                safelyNotifyError(onError, predicateError, {\n                                    raisedBy: \"predicate\"\n                                });\n                            }\n                            if (!runListener) {\n                                continue;\n                            }\n                            notifyListener(entry, action, api, getOriginalState);\n                        }\n                    }\n                } finally{\n                    originalState = INTERNAL_NIL_TOKEN;\n                }\n                return result;\n            };\n        };\n    };\n    return {\n        middleware: middleware,\n        startListening: startListening,\n        stopListening: stopListening,\n        clearListeners: clearListenerMiddleware\n    };\n}\n// src/autoBatchEnhancer.ts\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\nvar prepareAutoBatched = function() {\n    return function(payload) {\n        var _c;\n        return {\n            payload: payload,\n            meta: (_c = {}, _c[SHOULD_AUTOBATCH] = true, _c)\n        };\n    };\n};\nvar promise;\nvar queueMicrotaskShim = typeof queueMicrotask === \"function\" ? queueMicrotask.bind( false ? 0 : typeof global !== \"undefined\" ? global : globalThis) : function(cb) {\n    return (promise || (promise = Promise.resolve())).then(cb).catch(function(err) {\n        return setTimeout(function() {\n            throw err;\n        }, 0);\n    });\n};\nvar createQueueWithTimer = function(timeout) {\n    return function(notify) {\n        setTimeout(notify, timeout);\n    };\n};\nvar rAF =  false ? 0 : createQueueWithTimer(10);\nvar autoBatchEnhancer = function(options) {\n    if (options === void 0) {\n        options = {\n            type: \"raf\"\n        };\n    }\n    return function(next) {\n        return function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            var store = next.apply(void 0, args);\n            var notifying = true;\n            var shouldNotifyAtEndOfTick = false;\n            var notificationQueued = false;\n            var listeners = new Set();\n            var queueCallback = options.type === \"tick\" ? queueMicrotaskShim : options.type === \"raf\" ? rAF : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\n            var notifyListeners = function() {\n                notificationQueued = false;\n                if (shouldNotifyAtEndOfTick) {\n                    shouldNotifyAtEndOfTick = false;\n                    listeners.forEach(function(l) {\n                        return l();\n                    });\n                }\n            };\n            return Object.assign({}, store, {\n                subscribe: function(listener2) {\n                    var wrappedListener = function() {\n                        return notifying && listener2();\n                    };\n                    var unsubscribe = store.subscribe(wrappedListener);\n                    listeners.add(listener2);\n                    return function() {\n                        unsubscribe();\n                        listeners.delete(listener2);\n                    };\n                },\n                dispatch: function(action) {\n                    var _a;\n                    try {\n                        notifying = !((_a = action == null ? void 0 : action.meta) == null ? void 0 : _a[SHOULD_AUTOBATCH]);\n                        shouldNotifyAtEndOfTick = !notifying;\n                        if (shouldNotifyAtEndOfTick) {\n                            if (!notificationQueued) {\n                                notificationQueued = true;\n                                queueCallback(notifyListeners);\n                            }\n                        }\n                        return store.dispatch(action);\n                    } finally{\n                        notifying = true;\n                    }\n                }\n            });\n        };\n    };\n};\n// src/index.ts\n(0,immer__WEBPACK_IMPORTED_MODULE_2__.enableES5)();\n //# sourceMappingURL=redux-toolkit.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\n");

/***/ })

};
;